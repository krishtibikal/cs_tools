{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"/* Hide the \"Edit on Github\" button and paragraph header link */ .md-content__button { display: none; } .md-typeset .headerlink { display: none; } /* Skinny down and center the page */ .md-content { max-width: 75%; margin: auto; } /* Indent Features list, replace bullet point with check mark */ #features { margin-bottom: 0; margin-left: 30%; } [dir=ltr] .md-typeset ul li { margin-left: 20%; } ::marker { content: \"\u2714\ufe0f \"; } CS Tools is a command line utility written by the ThoughtSpot Professional Services & Customer Success teams, meant to augment built-in platform tools, help with administration of and enhance adoption within your ThoughtSpot environment. Features \u00b6 Low-fuss distribution and installation on MacOS, Linux, and Windows Supports Software version 7.1.1+ and the latest Cloud release Enhanced security with remote TQL and tsload workflows Multiple-cluster support (Dev, QA, Prod) Scheduler-friendly execution ThoughtSpot Spot App Get Help : https://cs_tools.forms.google/issue Documentation : https://cs_tools.thoughtspot.com/ Source Code : https://github.com/thoughtspot/cs_tools/ Got a question? Ask us on GitHub or fill out this form ! \u00b6","title":"Home"},{"location":"#features","text":"Low-fuss distribution and installation on MacOS, Linux, and Windows Supports Software version 7.1.1+ and the latest Cloud release Enhanced security with remote TQL and tsload workflows Multiple-cluster support (Dev, QA, Prod) Scheduler-friendly execution ThoughtSpot Spot App Get Help : https://cs_tools.forms.google/issue Documentation : https://cs_tools.thoughtspot.com/ Source Code : https://github.com/thoughtspot/cs_tools/","title":"Features"},{"location":"#got-a-question-ask-us-on-github-or-fill-out-this-form","text":"","title":"Got a question? Ask us on GitHub or fill out this form!"},{"location":"changelog/1.0.0/","text":"/* Hide the Next button in the footer (so customers can't find the dev docs) */ .md-footer__link--next { display: none; } v1.0.0 \u00b6 cs_tools Redesigned, Reimproved, Released. \u00b6 (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cs_tools tools Usage: cs_tools tools <tool-name> COMMAND [ARGS]... Run an installed tool. Tools are a collection of different scripts to perform different function which aren't native to the ThoughtSpot or advanced functionality for clients who have a well-adopted platform. Options: --helpfull Show the full help message and exit. -h, --help Show this message and exit. Commands: rtql Enable querying the ThoughtSpot TQL CLI from a remote machine. rtsload Enable loading files to ThoughtSpot from a remote machine. share-objects Share one or more tables from a database with a specified user group. transfer-ownership Transfer ownership of all objects from one user to another. To upgrade your environment , please download the latest distribution and run the install script.","title":"v1.0.0"},{"location":"changelog/1.0.0/#v100","text":"","title":" v1.0.0"},{"location":"changelog/1.0.0/#cs_tools-redesigned-reimproved-released","text":"(.cs_tools) C:\\work\\thoughtspot\\cs_tools>cs_tools tools Usage: cs_tools tools <tool-name> COMMAND [ARGS]... Run an installed tool. Tools are a collection of different scripts to perform different function which aren't native to the ThoughtSpot or advanced functionality for clients who have a well-adopted platform. Options: --helpfull Show the full help message and exit. -h, --help Show this message and exit. Commands: rtql Enable querying the ThoughtSpot TQL CLI from a remote machine. rtsload Enable loading files to ThoughtSpot from a remote machine. share-objects Share one or more tables from a database with a specified user group. transfer-ownership Transfer ownership of all objects from one user to another. To upgrade your environment , please download the latest distribution and run the install script.","title":"&nbsp; cs_tools Redesigned, Reimproved, Released."},{"location":"changelog/1.1.0/","text":"v1.1.0 \u00b6 2 new tools! \u00b6 With this release, we welcome two new contributors to the the CS Tools project! Try it now Delete Objects cs_tools tools delete-objects @DevinMcPherson-TS approached the project wanting freshen up his coding skills and help out some of our well-adopted customers with a by allowing them to leverage the bulk delete APIs. Try it now Security Sharing cs_tools tools sharing-security @mishathoughtspot (not a new contributor to code at ThoughtSpot by any means) Misha has plenty of experience working in and around security settings in ThoughtSpot and has come up with a really savvy interface for quickly seeing and setting table- and column-level security settings. Added Modified Bugfix Delete Objects tool - \"Bulk delete metadata objects from your ThoughtSpot platform.\" Security Sharing tool - \"Scalably manage your table- and column-level security right in the browser.\" metadata & security api calls to support the two new tools Share Objects \"share\" is now a command under the Security Sharing tool Logging level is now locked at DEBUG for all configurations (log records only ever went to file) tsload API model should now properly handle reroutes from the ETL server load balancer (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cs_tools tools --private Usage: cs_tools tools <tool-name> COMMAND [ARGS]... Run an installed tool. Tools are a collection of different scripts to perform different functions which aren't native to the ThoughtSpot or advanced functionality for clients who have a well-adopted platform. Options: --helpfull Show the full help message and exit. -h, --help Show this message and exit. Commands: created-objects Make ThoughtSpot content searchable in your platform. delete-objects Bulk delete metadata objects from your ThoughtSpot platform. dependency-checker Make Dependencies searchable in your platform. introspect-user-group Make Users and Groups searchable in your platform. rtql Enable querying the ThoughtSpot TQL CLI from a remote machine. rtsload Enable loading files to ThoughtSpot from a remote machine. security-sharing Scalably manage your table- and column-level security right in the browser. sharding-recommender Gather data on your existing Falcon tables for sharding. transfer-ownership Transfer ownership of all objects from one user to another. To upgrade your environment , please download the latest distribution and run the install script.","title":"v1.1.0"},{"location":"changelog/1.1.0/#v110","text":"","title":" v1.1.0"},{"location":"changelog/1.1.0/#2-new-tools","text":"With this release, we welcome two new contributors to the the CS Tools project! Try it now Delete Objects cs_tools tools delete-objects @DevinMcPherson-TS approached the project wanting freshen up his coding skills and help out some of our well-adopted customers with a by allowing them to leverage the bulk delete APIs. Try it now Security Sharing cs_tools tools sharing-security @mishathoughtspot (not a new contributor to code at ThoughtSpot by any means) Misha has plenty of experience working in and around security settings in ThoughtSpot and has come up with a really savvy interface for quickly seeing and setting table- and column-level security settings. Added Modified Bugfix Delete Objects tool - \"Bulk delete metadata objects from your ThoughtSpot platform.\" Security Sharing tool - \"Scalably manage your table- and column-level security right in the browser.\" metadata & security api calls to support the two new tools Share Objects \"share\" is now a command under the Security Sharing tool Logging level is now locked at DEBUG for all configurations (log records only ever went to file) tsload API model should now properly handle reroutes from the ETL server load balancer (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cs_tools tools --private Usage: cs_tools tools <tool-name> COMMAND [ARGS]... Run an installed tool. Tools are a collection of different scripts to perform different functions which aren't native to the ThoughtSpot or advanced functionality for clients who have a well-adopted platform. Options: --helpfull Show the full help message and exit. -h, --help Show this message and exit. Commands: created-objects Make ThoughtSpot content searchable in your platform. delete-objects Bulk delete metadata objects from your ThoughtSpot platform. dependency-checker Make Dependencies searchable in your platform. introspect-user-group Make Users and Groups searchable in your platform. rtql Enable querying the ThoughtSpot TQL CLI from a remote machine. rtsload Enable loading files to ThoughtSpot from a remote machine. security-sharing Scalably manage your table- and column-level security right in the browser. sharding-recommender Gather data on your existing Falcon tables for sharding. transfer-ownership Transfer ownership of all objects from one user to another. To upgrade your environment , please download the latest distribution and run the install script.","title":"&nbsp; 2 new tools!"},{"location":"changelog/1.2.0/","text":"v1.2.0 \u00b6 Documentation as a first class citizen \u00b6 With this release, we're getting a makeover! \u00b6 .. and I'm talkin' a HUGE one! \"Also\" is probably going to be my favorite word in this release. Not only will this website host our documentation and changes for each tool, but also how-to and help guides as well. The Github project is also now public! That means if you are savvy enough, you could submit a Pull Request to make the tools even better! The command line interface got a bit of a facelift also , with plenty of standardization in common functions, some fancier text output, as well as having the help text be more descriptive and match formats you've come to expect from other popular clis. Oh, and also on the list are two new tools called the Archiver and Extractor! There's a bunch more small changes and additions also , so check them out below! Try it now Archiver cs_tools tools archiver As your platform grows, users will create and use answers and pinboards. Sometimes, users will create content for temporary exploratory purpopses and then abandon it for newer pursuits. Archiver enables you to identify, tag, export, and remove that potentially abandoned content. Try it now Extractor cs_tools tools extractor It's Search, but on the command line! The premiere use case for this tool is to be able to extract data from the TS: BI Server worksheet and then load it into Embrace. ThoughtSpot will only store 6 months of user activity in this worksheet by default, but loading it into an Embrace-connected CDW could extend its lifespan further. Some tools have new names! We don't expect this will happen often. This release puts the CS Tools project out as a public resource, and so we're taking the opportunity to have more useful names. \ud83d\ude42 created-objects is now known as searchable-content dependency-checker is now known as searchable-dependencies introspect-user-group is now known as searchable-user-groups delete-objects is now known as bulk-deleter Added Modified Bugfix this site that you're currently viewing! documentation now has a new home Archiver released! Extractor released! Searchable Dependencies now supports searching for column and formula dependents Transfer Ownership allows you to specify only certain tags or GUIDs 1 to transfer Remote TSLoad now supports a LOT more tsload-native options a --temp_dir option was added to all commands and the configuration file to allow flexibility in saving temporary data a --verbose flag was added to all commands and the configuration file to give more in-depth debugging information help/issue submission via Google Forms Created Objects is now known as Searchable Content Dependency Checker is now known as Searchable Dependencies Introspect User Group is now known as Searchable User & Groups Delete Objects is now known as Bulk Deleter tools which offered downloadable TML files will now prefer to offer a SpotApp instead commands which offer an export to file or directory will now specify which in the option's documentation logging now properly propagates past transient status text logging should now capture the command issued along with details about the environment and config-user tsload service now ACTUALLY handle reroutes from the ETL server load balancer logging now properly handles special characters a pesky \"missing permissions\" bug which would fail fantastically for no reason config modify no longer reverts flag values ( --disable_ssl , --disable_sso , --verbose ) (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cstools tools --private Usage: cstools tools [--help] <tool> Run an installed tool. Tools are a collection of different scripts to perform different functions which aren't native to the ThoughtSpot or advanced functionality for clients who have a well-adopted platform. Options: --version Show the version and exit. -h, --help Show this message and exit. Commands: archiver Manage stale answers and pinboards within your platform. bulk-deleter Bulk delete metadata objects from your ThoughtSpot platform. extractor Extract data from a worksheet, view, or table in your platform. rtql Enable querying the ThoughtSpot TQL CLI from a remote machine. rtsload Enable loading files to ThoughtSpot from a remote machine. searchable-content Make ThoughtSpot content searchable in your platform. searchable-dependencies Make Dependencies searchable in your platform. searchable-user-groups Make Users and Groups searchable in your platform. security-sharing Scalably manage your table- and column-level security right in the browser. sharding-recommender Gather data on your existing Falcon tables for sharding. transfer-ownership Transfer ownership of all objects from one user to another. To upgrade your environment , please download the latest distribution and run the install script. limited transfer only available if you're on the ThoughtSpot Cloud September or Software 7.0.1 releases or better \u21a9","title":"v1.2.0"},{"location":"changelog/1.2.0/#v120","text":"","title":" v1.2.0"},{"location":"changelog/1.2.0/#documentation-as-a-first-class-citizen","text":"","title":"&nbsp; Documentation as a first class citizen"},{"location":"changelog/1.2.0/#with-this-release-were-getting-a-makeover","text":".. and I'm talkin' a HUGE one! \"Also\" is probably going to be my favorite word in this release. Not only will this website host our documentation and changes for each tool, but also how-to and help guides as well. The Github project is also now public! That means if you are savvy enough, you could submit a Pull Request to make the tools even better! The command line interface got a bit of a facelift also , with plenty of standardization in common functions, some fancier text output, as well as having the help text be more descriptive and match formats you've come to expect from other popular clis. Oh, and also on the list are two new tools called the Archiver and Extractor! There's a bunch more small changes and additions also , so check them out below! Try it now Archiver cs_tools tools archiver As your platform grows, users will create and use answers and pinboards. Sometimes, users will create content for temporary exploratory purpopses and then abandon it for newer pursuits. Archiver enables you to identify, tag, export, and remove that potentially abandoned content. Try it now Extractor cs_tools tools extractor It's Search, but on the command line! The premiere use case for this tool is to be able to extract data from the TS: BI Server worksheet and then load it into Embrace. ThoughtSpot will only store 6 months of user activity in this worksheet by default, but loading it into an Embrace-connected CDW could extend its lifespan further. Some tools have new names! We don't expect this will happen often. This release puts the CS Tools project out as a public resource, and so we're taking the opportunity to have more useful names. \ud83d\ude42 created-objects is now known as searchable-content dependency-checker is now known as searchable-dependencies introspect-user-group is now known as searchable-user-groups delete-objects is now known as bulk-deleter Added Modified Bugfix this site that you're currently viewing! documentation now has a new home Archiver released! Extractor released! Searchable Dependencies now supports searching for column and formula dependents Transfer Ownership allows you to specify only certain tags or GUIDs 1 to transfer Remote TSLoad now supports a LOT more tsload-native options a --temp_dir option was added to all commands and the configuration file to allow flexibility in saving temporary data a --verbose flag was added to all commands and the configuration file to give more in-depth debugging information help/issue submission via Google Forms Created Objects is now known as Searchable Content Dependency Checker is now known as Searchable Dependencies Introspect User Group is now known as Searchable User & Groups Delete Objects is now known as Bulk Deleter tools which offered downloadable TML files will now prefer to offer a SpotApp instead commands which offer an export to file or directory will now specify which in the option's documentation logging now properly propagates past transient status text logging should now capture the command issued along with details about the environment and config-user tsload service now ACTUALLY handle reroutes from the ETL server load balancer logging now properly handles special characters a pesky \"missing permissions\" bug which would fail fantastically for no reason config modify no longer reverts flag values ( --disable_ssl , --disable_sso , --verbose ) (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cstools tools --private Usage: cstools tools [--help] <tool> Run an installed tool. Tools are a collection of different scripts to perform different functions which aren't native to the ThoughtSpot or advanced functionality for clients who have a well-adopted platform. Options: --version Show the version and exit. -h, --help Show this message and exit. Commands: archiver Manage stale answers and pinboards within your platform. bulk-deleter Bulk delete metadata objects from your ThoughtSpot platform. extractor Extract data from a worksheet, view, or table in your platform. rtql Enable querying the ThoughtSpot TQL CLI from a remote machine. rtsload Enable loading files to ThoughtSpot from a remote machine. searchable-content Make ThoughtSpot content searchable in your platform. searchable-dependencies Make Dependencies searchable in your platform. searchable-user-groups Make Users and Groups searchable in your platform. security-sharing Scalably manage your table- and column-level security right in the browser. sharding-recommender Gather data on your existing Falcon tables for sharding. transfer-ownership Transfer ownership of all objects from one user to another. To upgrade your environment , please download the latest distribution and run the install script. limited transfer only available if you're on the ThoughtSpot Cloud September or Software 7.0.1 releases or better \u21a9","title":"With this release, we're getting a makeover!"},{"location":"changelog/1.3.0/","text":"v1.3.0 \u00b6 Spring Cleaning \u00b6 Minimum Supported ThoughtSpot version The minimum supported ThoughtSpot version has been raised to 7.1.1, versions prior to that are only incidentally supported. Please consult with your Customer Success Manager and ThoughtSpot Support Engineer to ensure you have a recent version. This release of the tools bring a lot of much-needed organization and cleanup. v1.3.0 comes the week before our annual customer conference, Beyond 2022 . Along with plenty of cleanup, we have an official release on ThoughtSpot Community as well as Knowledge Articles on how to implement tools to achieve certain objectives. Another big change in this release is the provisional release of Syncers . Syncers allow CS Tools to interact with a data storage layer without having to know the explicit details of how to do so. We've implemented syncers to many popular data storage formats. Head on over to the documentation page to learn more about them! We've also released new tools for Scriptability, bulk User Management, and the Searchable family of tools have been vastly improved as well. Try it now Scriptability cs_tools tools scriptability Hoping to bring more software development lifecycle to your platform, or simply need a better way to migrate between environments? Scriptability will help work with TML and perform other data change management activities -- and will only get better in the coming releases. Try it now User Management cs_tools tools user-management Migrating authentication providers? Want to sync your users and groups from an external data format? Need to transfer all the content from one user to another? The commands under the User Management tool have you covered! Added Modified Bugfix CS Tools Internals Syncers! .. interact with external data sources User Management a collection of bulk user tools Scriptability a \ud83d\udd10 private tool to aid in migration activities the minimum supported version of ThoughtSpot is now 7.1.1 Windows is hard, hopefully we've fixed the Instal & Activate scripts cs_tools config create|modify now supports specifying a default config cs_tools logs export now supports specifying a subset of the latest logfiles Archiver now has much more sensible defaults Bulk Deleter and Searchable are now public tools Searchable is now a single tool with a larger data model user/transfer/ownership now properly bulk transfers individually identified objects nicer, less scary error formatting for known exceptional behavior Bulk Deleter will no longer delete invalidly configured objects we had a full project reorganization <cs_tools> \u251c\u2500 cs_tools/ \u2502 \u251c\u2500 api/ <---- contains rest_api_v1, models, middlewares, rest utilies \u2502 \u251c\u2500 cli/ <---- powers the cli, contains all tools, cli utilities \u2502 \u251c\u2500 data/ <---- database models, data transer objects, enums \u2502 \u251c\u2500 sync/ <---- syncer protcol, registry, built-in syncers \u2502 \u251c\u2500 ... \u2502 \u2514\u2500 thoughtspot.py \u251c\u2500 docs/ \u2502 \u251c\u2500 ... \u2502 \u2514\u2500 ... \u2514\u2500 tests/ \u251c\u2500 ... \u2514\u2500 ... v1 of a dependency injection framework (mostly for the ThoughtSpot client itself) new middlewares for tsload , tql , connection , and metadata install distribution build is now automated.. and hopefully more resilient (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cs_tools tools --private Usage: cs_tools tools [--help] <tool> Run an installed tool. Tools are a collection of different scripts to perform different functions which aren't native to the ThoughtSpot or advanced functionality for clients who have a well-adopted platform. Options: --version Show the version and exit. -h, --help, --helpfull Show this message and exit. Commands: archiver Manage stale answers and liveboards within your platform. bulk-deleter Bulk delete metadata objects from your ThoughtSpot platform. extractor Extract data from a worksheet, view, or table in your platform. rtql Enable querying the ThoughtSpot TQL CLI from a remote machine. rtsload Enable loading files to ThoughtSpot from a remote machine. scriptability Tool for easily migrating TML between clusters. searchable Explore your ThoughtSpot metadata, in ThoughtSpot! security-sharing Scalably manage your table- and column-level security right in the browser. sharding-recommender Gather data on your existing Falcon tables for sharding. user-management Managing Users and Groups in bulk. To upgrade your environment , please download the latest distribution and run the install script.","title":"v1.3.0"},{"location":"changelog/1.3.0/#v130","text":"","title":" v1.3.0"},{"location":"changelog/1.3.0/#spring-cleaning","text":"Minimum Supported ThoughtSpot version The minimum supported ThoughtSpot version has been raised to 7.1.1, versions prior to that are only incidentally supported. Please consult with your Customer Success Manager and ThoughtSpot Support Engineer to ensure you have a recent version. This release of the tools bring a lot of much-needed organization and cleanup. v1.3.0 comes the week before our annual customer conference, Beyond 2022 . Along with plenty of cleanup, we have an official release on ThoughtSpot Community as well as Knowledge Articles on how to implement tools to achieve certain objectives. Another big change in this release is the provisional release of Syncers . Syncers allow CS Tools to interact with a data storage layer without having to know the explicit details of how to do so. We've implemented syncers to many popular data storage formats. Head on over to the documentation page to learn more about them! We've also released new tools for Scriptability, bulk User Management, and the Searchable family of tools have been vastly improved as well. Try it now Scriptability cs_tools tools scriptability Hoping to bring more software development lifecycle to your platform, or simply need a better way to migrate between environments? Scriptability will help work with TML and perform other data change management activities -- and will only get better in the coming releases. Try it now User Management cs_tools tools user-management Migrating authentication providers? Want to sync your users and groups from an external data format? Need to transfer all the content from one user to another? The commands under the User Management tool have you covered! Added Modified Bugfix CS Tools Internals Syncers! .. interact with external data sources User Management a collection of bulk user tools Scriptability a \ud83d\udd10 private tool to aid in migration activities the minimum supported version of ThoughtSpot is now 7.1.1 Windows is hard, hopefully we've fixed the Instal & Activate scripts cs_tools config create|modify now supports specifying a default config cs_tools logs export now supports specifying a subset of the latest logfiles Archiver now has much more sensible defaults Bulk Deleter and Searchable are now public tools Searchable is now a single tool with a larger data model user/transfer/ownership now properly bulk transfers individually identified objects nicer, less scary error formatting for known exceptional behavior Bulk Deleter will no longer delete invalidly configured objects we had a full project reorganization <cs_tools> \u251c\u2500 cs_tools/ \u2502 \u251c\u2500 api/ <---- contains rest_api_v1, models, middlewares, rest utilies \u2502 \u251c\u2500 cli/ <---- powers the cli, contains all tools, cli utilities \u2502 \u251c\u2500 data/ <---- database models, data transer objects, enums \u2502 \u251c\u2500 sync/ <---- syncer protcol, registry, built-in syncers \u2502 \u251c\u2500 ... \u2502 \u2514\u2500 thoughtspot.py \u251c\u2500 docs/ \u2502 \u251c\u2500 ... \u2502 \u2514\u2500 ... \u2514\u2500 tests/ \u251c\u2500 ... \u2514\u2500 ... v1 of a dependency injection framework (mostly for the ThoughtSpot client itself) new middlewares for tsload , tql , connection , and metadata install distribution build is now automated.. and hopefully more resilient (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cs_tools tools --private Usage: cs_tools tools [--help] <tool> Run an installed tool. Tools are a collection of different scripts to perform different functions which aren't native to the ThoughtSpot or advanced functionality for clients who have a well-adopted platform. Options: --version Show the version and exit. -h, --help, --helpfull Show this message and exit. Commands: archiver Manage stale answers and liveboards within your platform. bulk-deleter Bulk delete metadata objects from your ThoughtSpot platform. extractor Extract data from a worksheet, view, or table in your platform. rtql Enable querying the ThoughtSpot TQL CLI from a remote machine. rtsload Enable loading files to ThoughtSpot from a remote machine. scriptability Tool for easily migrating TML between clusters. searchable Explore your ThoughtSpot metadata, in ThoughtSpot! security-sharing Scalably manage your table- and column-level security right in the browser. sharding-recommender Gather data on your existing Falcon tables for sharding. user-management Managing Users and Groups in bulk. To upgrade your environment , please download the latest distribution and run the install script.","title":"&nbsp; Spring Cleaning"},{"location":"cs-tools/overview/","text":"Available Tools \u00b6 CS Tools is a community maintained and supported project, written by the ThoughtSpot Professional Services & Customer Success organizations. It is meant to augment built-in platform tools, help with administration of and enhance adoption within your ThoughtSpot environment. All tools are provided as-is While every effort has been made to test and certify use of these tools in the various supported ThoughtSpot deployments, each environment is different. You should ALWAYS take a snapshot before you make any significant changes to your environment! Advanced Tools \u00b6 Tools which are marked with a \ud83d\udd10 in the sidebar utilize unpublished, or internal, API calls in your ThoughtSpot platform and thus could change with any version or release . You should not rely on them for production-critical workflows. Helpful Links Installation Guide Setup a configuration file Found a problem? Submit an issue. (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cs_tools tools Usage: cs_tools tools [--help] <tool> Run an installed tool. Tools are a collection of different scripts to perform different functions which aren't native to the ThoughtSpot or advanced functionality for clients who have a well-adopted platform. Options: -h, --help, --helpfull Show this message and exit. Tools: archiver Manage stale answers and liveboards within your platform. bulk-deleter Bulk delete metadata objects from your ThoughtSpot platform. extractor Extract data from a worksheet, view, or table in your platform. rtql Enable querying the ThoughtSpot TQL CLI from a remote machine. rtsload Enable loading files to ThoughtSpot from a remote machine. searchable Explore your ThoughtSpot metadata, in ThoughtSpot! security-sharing Scalably manage your table- and column-level security right in the browser. user-management Managing Users and Groups in bulk.","title":"Available Tools"},{"location":"cs-tools/overview/#available-tools","text":"CS Tools is a community maintained and supported project, written by the ThoughtSpot Professional Services & Customer Success organizations. It is meant to augment built-in platform tools, help with administration of and enhance adoption within your ThoughtSpot environment. All tools are provided as-is While every effort has been made to test and certify use of these tools in the various supported ThoughtSpot deployments, each environment is different. You should ALWAYS take a snapshot before you make any significant changes to your environment!","title":"Available Tools"},{"location":"cs-tools/overview/#advanced-tools","text":"Tools which are marked with a \ud83d\udd10 in the sidebar utilize unpublished, or internal, API calls in your ThoughtSpot platform and thus could change with any version or release . You should not rely on them for production-critical workflows. Helpful Links Installation Guide Setup a configuration file Found a problem? Submit an issue. (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cs_tools tools Usage: cs_tools tools [--help] <tool> Run an installed tool. Tools are a collection of different scripts to perform different functions which aren't native to the ThoughtSpot or advanced functionality for clients who have a well-adopted platform. Options: -h, --help, --helpfull Show this message and exit. Tools: archiver Manage stale answers and liveboards within your platform. bulk-deleter Bulk delete metadata objects from your ThoughtSpot platform. extractor Extract data from a worksheet, view, or table in your platform. rtql Enable querying the ThoughtSpot TQL CLI from a remote machine. rtsload Enable loading files to ThoughtSpot from a remote machine. searchable Explore your ThoughtSpot metadata, in ThoughtSpot! security-sharing Scalably manage your table- and column-level security right in the browser. user-management Managing Users and Groups in bulk.","title":"Advanced Tools"},{"location":"cs-tools/archiver/","text":"Archiver \u00b6 Archiver allows the ThoughtSpot admin to survey and identify all the content that users create. This content can build up over time and cause maintenance and upgrades to run more slowly. Additionally, your ThoughtSpot platform has some minor overhead when holding references to all of these objects as well. With great power, comes great responsibility! Archiver is a tool that can perform mass modification and deletion of content in your platform! If not used appropriately, you could remove worthwhile answers and liveboards. Your users trust you , use this tool carefully. CLI preview \u00b6 archiver --help archiver identify archiver revert archiver remove (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cstools tools archiver --help Usage: cstools tools archiver [--version, --help] <command> Manage stale answers and liveboards within your platform. As your platform grows, user-generated content will naturally grow. Sometimes, users will create content for temporary exploratory purposes and then abandon it for newer pursuits. Archiver enables you to identify, tag, export, and remove that potentially abandoned content. Options: --version Show the version and exit. -h, --help, --helpfull Show this message and exit. Commands: identify Identify objects which objects can be archived. remove Remove objects from the ThoughtSpot platform. revert Remove objects from the temporary archive. Selection criteria The identify command will skip content owned by \"System User\" (system) and \"Administrator\" (tsamin) (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cstools tools archiver identify --help Usage: cstools tools archiver identify --config IDENTIFIER [--option, ..., --help] Identify objects which objects can be archived. Identification criteria will skip content owned by \"System User\" (system) and \"Administrator\" (tsadmin) ThoughtSpot stores usage activity (default: 6 months of interactions) by user in the platform. If a user views, edits, or creates an Answer or Liveboard, ThoughtSpot knows about it. This can be used as a proxy to understanding what content is actively being used. Options: --tag TEXT tag name to use for labeling objects to archive (case sensitive) (default: TO BE ARCHIVED) --content (answer|liveboard|all) type of content to archive (default: all) --recent-activity INTEGER days to IGNORE for content viewed or access (default: all history) --recent-modified INTEGER days to IGNORE for content created or modified (default: 100) --ignore-tag TEXT tagged content to ignore (case sensitive), can be specified multiple times --dry-run test your selection criteria, doesn't apply tags --no-prompt disable the confirmation prompt --report protocol://DEFINITION.toml generates a list of content to be archived, utilizes protocol syntax --config IDENTIFIER config file identifier (required) -h, --help, --helpfull Show this message and exit. (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cstools tools archiver revert --help Usage: cstools tools archiver revert --config IDENTIFIER [--option, ..., --help] Remove objects from the temporary archive. Options: --tag TEXT tag name to revert on labeled content (case sensitive) (default: TO BE ARCHIVED) --delete-tag remove the tag itself, after untagging identified content --dry-run test your selection criteria, doesn't revert tags --no-prompt disable the confirmation prompt --report protocol://DEFINITION.toml generates a list of content to be reverted, utilizes protocol syntax --config IDENTIFIER config file identifier (required) -h, --help, --helpfull Show this message and exit. (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cstools tools archiver remove --help Usage: cstools tools archiver remove --config IDENTIFIER [--option, ..., --help] Remove objects from the ThoughtSpot platform. Options: --tag TEXT tag name to use to remove objects (case sensitive) (default: TO BE ARCHIVED) --export-tml FILE.zip if set, path to export tagged objects as a zipfile --delete-tag remove the tag itself, after deleting identified content --export-only export all tagged content, but do not remove it from that platform --dry-run test your selection criteria, doesn't delete content --no-prompt disable the confirmation prompt --report protocol://DEFINITION.toml generates a list of content to be reverted, utilizes protocol syntax --config IDENTIFIER config file identifier (required) -h, --help, --helpfull Show this message and exit. Changelog \u00b6 v1.1.0 2022-04-28 Added Modified archiver.identify can now ignore existing tags @boonhapus . input/output using syncers! @boonhapus . more sensible default parameters for identification Changes History v1.0.0 2021-05-24 Added Initial release @boonhapus .","title":"Archiver"},{"location":"cs-tools/archiver/#archiver","text":"Archiver allows the ThoughtSpot admin to survey and identify all the content that users create. This content can build up over time and cause maintenance and upgrades to run more slowly. Additionally, your ThoughtSpot platform has some minor overhead when holding references to all of these objects as well. With great power, comes great responsibility! Archiver is a tool that can perform mass modification and deletion of content in your platform! If not used appropriately, you could remove worthwhile answers and liveboards. Your users trust you , use this tool carefully.","title":"Archiver"},{"location":"cs-tools/archiver/#cli-preview","text":"archiver --help archiver identify archiver revert archiver remove (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cstools tools archiver --help Usage: cstools tools archiver [--version, --help] <command> Manage stale answers and liveboards within your platform. As your platform grows, user-generated content will naturally grow. Sometimes, users will create content for temporary exploratory purposes and then abandon it for newer pursuits. Archiver enables you to identify, tag, export, and remove that potentially abandoned content. Options: --version Show the version and exit. -h, --help, --helpfull Show this message and exit. Commands: identify Identify objects which objects can be archived. remove Remove objects from the ThoughtSpot platform. revert Remove objects from the temporary archive. Selection criteria The identify command will skip content owned by \"System User\" (system) and \"Administrator\" (tsamin) (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cstools tools archiver identify --help Usage: cstools tools archiver identify --config IDENTIFIER [--option, ..., --help] Identify objects which objects can be archived. Identification criteria will skip content owned by \"System User\" (system) and \"Administrator\" (tsadmin) ThoughtSpot stores usage activity (default: 6 months of interactions) by user in the platform. If a user views, edits, or creates an Answer or Liveboard, ThoughtSpot knows about it. This can be used as a proxy to understanding what content is actively being used. Options: --tag TEXT tag name to use for labeling objects to archive (case sensitive) (default: TO BE ARCHIVED) --content (answer|liveboard|all) type of content to archive (default: all) --recent-activity INTEGER days to IGNORE for content viewed or access (default: all history) --recent-modified INTEGER days to IGNORE for content created or modified (default: 100) --ignore-tag TEXT tagged content to ignore (case sensitive), can be specified multiple times --dry-run test your selection criteria, doesn't apply tags --no-prompt disable the confirmation prompt --report protocol://DEFINITION.toml generates a list of content to be archived, utilizes protocol syntax --config IDENTIFIER config file identifier (required) -h, --help, --helpfull Show this message and exit. (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cstools tools archiver revert --help Usage: cstools tools archiver revert --config IDENTIFIER [--option, ..., --help] Remove objects from the temporary archive. Options: --tag TEXT tag name to revert on labeled content (case sensitive) (default: TO BE ARCHIVED) --delete-tag remove the tag itself, after untagging identified content --dry-run test your selection criteria, doesn't revert tags --no-prompt disable the confirmation prompt --report protocol://DEFINITION.toml generates a list of content to be reverted, utilizes protocol syntax --config IDENTIFIER config file identifier (required) -h, --help, --helpfull Show this message and exit. (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cstools tools archiver remove --help Usage: cstools tools archiver remove --config IDENTIFIER [--option, ..., --help] Remove objects from the ThoughtSpot platform. Options: --tag TEXT tag name to use to remove objects (case sensitive) (default: TO BE ARCHIVED) --export-tml FILE.zip if set, path to export tagged objects as a zipfile --delete-tag remove the tag itself, after deleting identified content --export-only export all tagged content, but do not remove it from that platform --dry-run test your selection criteria, doesn't delete content --no-prompt disable the confirmation prompt --report protocol://DEFINITION.toml generates a list of content to be reverted, utilizes protocol syntax --config IDENTIFIER config file identifier (required) -h, --help, --helpfull Show this message and exit.","title":"CLI preview"},{"location":"cs-tools/archiver/#changelog","text":"v1.1.0 2022-04-28 Added Modified archiver.identify can now ignore existing tags @boonhapus . input/output using syncers! @boonhapus . more sensible default parameters for identification Changes History v1.0.0 2021-05-24 Added Initial release @boonhapus .","title":"Changelog"},{"location":"cs-tools/bulk-deleter/","text":"Bulk Deleter \u00b6 Over the life of a ThoughtSpot cluster objects in the system grow. With changes in employee roles and business problems you may find that tens of thousands of objects can be left behind. This tool allows you to remove objects from the metadata enmasse. The tool separates deletes objects in batches that can be specified in the args to speed up the delete process, but gives less visibility should an issue occur. A summary of what has been removed is saved in the logs directory of cs-tools. bulk-deleter --help bulk-deleter from-tabular bulk-deleter single (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cs_tools tools bulk-deleter --help Usage: cs_tools tools bulk-deleter [--version, --help] <command> Bulk delete metadata objects from your ThoughtSpot platform. Options: --version Show the version and exit. -h, --help, --helpfull Show this message and exit. Commands: from-tabular Remove many objects from ThoughtSpot. single Removes a specific object from ThoughtSpot. (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cs_tools tools bulk-deleter from-tabular --help Usage: cs_tools tools bulk-deleter from-tabular --config IDENTIFIER [--option, ..., --help] Remove many objects from ThoughtSpot. Objects to delete are limited to answers and liveboards, but can follow either naming convention of internal API type, or the name found in the user interface. If you are deleting from an external data source, your data must follow the tabular format below. +-----------------------+-------------+ | object_type | object_guid | +-----------------------+-------------+ | saved answer | guid1 | | pinboard | guid2 | | liveboard | guid3 | | ... | ... | | QUESTION_ANSWER_BOOK | guid4 | | PINBOARD_ANSWER_BOOK | guid5 | | ... | ... | +-----------------------+-------------+ Options: --syncer protocol://DEFINITION.toml protocol and path for options to pass to the syncer --deletion TEXT if using --syncer, directive to find user deletion at --batchsize INTEGER maximum amount of objects to delete simultaneously (default: 1) --config IDENTIFIER config file identifier (required) -h, --help, --helpfull Show this message and exit. (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cs_tools tools bulk-deleter single --help Usage: cs_tools tools bulk-deleter single --config IDENTIFIER [--option, ..., --help] Removes a specific object from ThoughtSpot. Options: --type (saved answer|pinboard|QUESTION_ANSWER_BOOK|PINBOARD_ANSWER_BOOK) type of the metadata to delete (required) --guid TEXT guid to delete (required) --config IDENTIFIER config file identifier (required) -h, --help, --helpfull Show this message and exit. Changelog \u00b6 v1.1.0 2022-04-28 Modified Bugfix input/output using syncers! @boonhapus . updated to accept Liveboards handle case where user submits an invalid object to be deleted (by type or guid) Changes History v1.0.1 2021-11-09 Modified now known as Bulk Deleter, bulk-deleter --save_path is now --export @boonhapus . v1.0.0 2021-08-24 Added Initial release from @dpm .","title":"Bulk Deleter"},{"location":"cs-tools/bulk-deleter/#bulk-deleter","text":"Over the life of a ThoughtSpot cluster objects in the system grow. With changes in employee roles and business problems you may find that tens of thousands of objects can be left behind. This tool allows you to remove objects from the metadata enmasse. The tool separates deletes objects in batches that can be specified in the args to speed up the delete process, but gives less visibility should an issue occur. A summary of what has been removed is saved in the logs directory of cs-tools. bulk-deleter --help bulk-deleter from-tabular bulk-deleter single (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cs_tools tools bulk-deleter --help Usage: cs_tools tools bulk-deleter [--version, --help] <command> Bulk delete metadata objects from your ThoughtSpot platform. Options: --version Show the version and exit. -h, --help, --helpfull Show this message and exit. Commands: from-tabular Remove many objects from ThoughtSpot. single Removes a specific object from ThoughtSpot. (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cs_tools tools bulk-deleter from-tabular --help Usage: cs_tools tools bulk-deleter from-tabular --config IDENTIFIER [--option, ..., --help] Remove many objects from ThoughtSpot. Objects to delete are limited to answers and liveboards, but can follow either naming convention of internal API type, or the name found in the user interface. If you are deleting from an external data source, your data must follow the tabular format below. +-----------------------+-------------+ | object_type | object_guid | +-----------------------+-------------+ | saved answer | guid1 | | pinboard | guid2 | | liveboard | guid3 | | ... | ... | | QUESTION_ANSWER_BOOK | guid4 | | PINBOARD_ANSWER_BOOK | guid5 | | ... | ... | +-----------------------+-------------+ Options: --syncer protocol://DEFINITION.toml protocol and path for options to pass to the syncer --deletion TEXT if using --syncer, directive to find user deletion at --batchsize INTEGER maximum amount of objects to delete simultaneously (default: 1) --config IDENTIFIER config file identifier (required) -h, --help, --helpfull Show this message and exit. (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cs_tools tools bulk-deleter single --help Usage: cs_tools tools bulk-deleter single --config IDENTIFIER [--option, ..., --help] Removes a specific object from ThoughtSpot. Options: --type (saved answer|pinboard|QUESTION_ANSWER_BOOK|PINBOARD_ANSWER_BOOK) type of the metadata to delete (required) --guid TEXT guid to delete (required) --config IDENTIFIER config file identifier (required) -h, --help, --helpfull Show this message and exit.","title":"Bulk Deleter"},{"location":"cs-tools/bulk-deleter/#changelog","text":"v1.1.0 2022-04-28 Modified Bugfix input/output using syncers! @boonhapus . updated to accept Liveboards handle case where user submits an invalid object to be deleted (by type or guid) Changes History v1.0.1 2021-11-09 Modified now known as Bulk Deleter, bulk-deleter --save_path is now --export @boonhapus . v1.0.0 2021-08-24 Added Initial release from @dpm .","title":"Changelog"},{"location":"cs-tools/extractor/","text":"Extractor \u00b6 It is often difficult to programmatically use the result set of a query that runs in the ThoughtSpot UI search bar. To use the data that we retrieve from a query programmatically, you can use this tool to just that. When issuing a query through the ThoughtSpot UI, users make selections to disambiguate a query. Your Search will need to be modified in order to extract data from the source. See Components of a search query . CLI preview \u00b6 extractor --help extractor search (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cs_tools tools extractor --help Usage: cs_tools tools extractor [--version, --help] <command> Extract data from a worksheet, view, or table in your platform. Options: --version Show the version and exit. -h, --help, --helpfull Show this message and exit. Commands: search Search a dataset from the command line. (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cs_tools tools extractor search --help Usage: cs_tools tools extractor search --config IDENTIFIER [--option, ..., --help] Search a dataset from the command line. Columns must be surrounded by square brackets. Search-level formulas are not currently supported, but a formula defined as part of a data source is. Options: --query TEXT search terms to issue against the dataset (required) --dataset TEXT name of the worksheet, view, or table to search against (required) --syncer protocol://DEFINITION.toml protocol and path for options to pass to the syncer (required) --target TEXT syncer directive to load data to (required) --data-type (worksheet|table|view) type of object to search (default: RecordsetType.worksheet) --config IDENTIFIER config file identifier (required) -h, --help, --helpfull Show this message and exit. Changelog \u00b6 v1.1.0 2022-04-28 Modified input/output using syncers! @boonhapus . Changes History v1.0.0 2020-11-14 Added Initial release @boonhapus .","title":"Extractor"},{"location":"cs-tools/extractor/#extractor","text":"It is often difficult to programmatically use the result set of a query that runs in the ThoughtSpot UI search bar. To use the data that we retrieve from a query programmatically, you can use this tool to just that. When issuing a query through the ThoughtSpot UI, users make selections to disambiguate a query. Your Search will need to be modified in order to extract data from the source. See Components of a search query .","title":"Extractor"},{"location":"cs-tools/extractor/#cli-preview","text":"extractor --help extractor search (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cs_tools tools extractor --help Usage: cs_tools tools extractor [--version, --help] <command> Extract data from a worksheet, view, or table in your platform. Options: --version Show the version and exit. -h, --help, --helpfull Show this message and exit. Commands: search Search a dataset from the command line. (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cs_tools tools extractor search --help Usage: cs_tools tools extractor search --config IDENTIFIER [--option, ..., --help] Search a dataset from the command line. Columns must be surrounded by square brackets. Search-level formulas are not currently supported, but a formula defined as part of a data source is. Options: --query TEXT search terms to issue against the dataset (required) --dataset TEXT name of the worksheet, view, or table to search against (required) --syncer protocol://DEFINITION.toml protocol and path for options to pass to the syncer (required) --target TEXT syncer directive to load data to (required) --data-type (worksheet|table|view) type of object to search (default: RecordsetType.worksheet) --config IDENTIFIER config file identifier (required) -h, --help, --helpfull Show this message and exit.","title":"CLI preview"},{"location":"cs-tools/extractor/#changelog","text":"v1.1.0 2022-04-28 Modified input/output using syncers! @boonhapus . Changes History v1.0.0 2020-11-14 Added Initial release @boonhapus .","title":"Changelog"},{"location":"cs-tools/rtql/","text":"Remote TQL \u00b6 This solution allows you to interact with the TQL utility from a remote machine. There are three command for remote TQL: Interactive, get the full TQL experience on your local machine Command, execute a single TQL command File, execute a set of commands Remote TQL enforces privileges You must have at least the Can Manage Data privilege in ThoughtSpot to use this tool. If you are running TQL within on the backend command line, you are most likely signed in under the admin account. CS Tools enhances this security by enforcing privileges based on what user is logged in. Interactive TQL preview \u00b6 CLI preview \u00b6 rtql --help rtql command rtql file rtql interactive (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cs_tools tools rtql --help Usage: cs_tools tools rtql [--version, --help] <command> Enable querying the ThoughtSpot TQL CLI from a remote machine. TQL is the ThoughtSpot language for entering SQL commands. You can use TQL to view and modify schemas and data in tables. For further information on TQL, please refer to: https://docs.thoughtspot.com/latest/reference/sql-cli-commands.html https://docs.thoughtspot.com/latest/reference/tql-service-api-ref.html Options: --version Show the version and exit. -h, --help, --helpfull Show this message and exit. Commands: command Run a single TQL command on a remote server. file Run multiple commands within TQL on a remote server. interactive Run an interactive TQL session as if you were on the cluster. (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cs_tools tools rtql command --help Usage: cs_tools tools rtql command --config IDENTIFIER [--option, ..., --help] [COMMAND] Run a single TQL command on a remote server. By default, this command will accept input from a pipe. Arguments: (COMMAND) TQL query to execute (default: -) Options: --schema TEXT schema name to use (default: falcon_default_schema) --config IDENTIFIER config file identifier (required) -h, --help, --helpfull Show this message and exit. (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cs_tools tools rtql file --help Usage: cs_tools tools rtql file --config IDENTIFIER [--option, ..., --help] FILE.tql Run multiple commands within TQL on a remote server. Arguments: FILE.tql path to file to execute, default to stdin (required) Options: --config IDENTIFIER config file identifier (required) -h, --help, --helpfull Show this message and exit. (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cs_tools tools rtql interactive --help Usage: cs_tools tools rtql interactive --config IDENTIFIER [--option, ..., --help] Run an interactive TQL session as if you were on the cluster. TQL is a command line interface for creating schemas and performing basic database administration. For a list of all commands, type \"help\" after invoking tql Options: --autocomplete toggle auto complete feature (default: True) --schema TEXT schema name to use (default: falcon_default_schema) --debug print the entire response to console --timeout INTEGER network call timeout threshold (default: 5.0) --config IDENTIFIER config file identifier (required) -h, --help, --helpfull Show this message and exit. Changelog \u00b6 v1.0.2 2021-08-28 Bugfix tqlservice response uncaught error @boonhapus . Changes History v1.0.1 2021-05-24 Modified Handle clear in the Interactive TQL shell @boonhapus . v1.0.0 2021-05-22 Added Initial release @boonhapus .","title":"Remote TQL"},{"location":"cs-tools/rtql/#remote-tql","text":"This solution allows you to interact with the TQL utility from a remote machine. There are three command for remote TQL: Interactive, get the full TQL experience on your local machine Command, execute a single TQL command File, execute a set of commands Remote TQL enforces privileges You must have at least the Can Manage Data privilege in ThoughtSpot to use this tool. If you are running TQL within on the backend command line, you are most likely signed in under the admin account. CS Tools enhances this security by enforcing privileges based on what user is logged in.","title":"Remote TQL"},{"location":"cs-tools/rtql/#interactive-tql-preview","text":"","title":"Interactive TQL preview"},{"location":"cs-tools/rtql/#cli-preview","text":"rtql --help rtql command rtql file rtql interactive (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cs_tools tools rtql --help Usage: cs_tools tools rtql [--version, --help] <command> Enable querying the ThoughtSpot TQL CLI from a remote machine. TQL is the ThoughtSpot language for entering SQL commands. You can use TQL to view and modify schemas and data in tables. For further information on TQL, please refer to: https://docs.thoughtspot.com/latest/reference/sql-cli-commands.html https://docs.thoughtspot.com/latest/reference/tql-service-api-ref.html Options: --version Show the version and exit. -h, --help, --helpfull Show this message and exit. Commands: command Run a single TQL command on a remote server. file Run multiple commands within TQL on a remote server. interactive Run an interactive TQL session as if you were on the cluster. (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cs_tools tools rtql command --help Usage: cs_tools tools rtql command --config IDENTIFIER [--option, ..., --help] [COMMAND] Run a single TQL command on a remote server. By default, this command will accept input from a pipe. Arguments: (COMMAND) TQL query to execute (default: -) Options: --schema TEXT schema name to use (default: falcon_default_schema) --config IDENTIFIER config file identifier (required) -h, --help, --helpfull Show this message and exit. (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cs_tools tools rtql file --help Usage: cs_tools tools rtql file --config IDENTIFIER [--option, ..., --help] FILE.tql Run multiple commands within TQL on a remote server. Arguments: FILE.tql path to file to execute, default to stdin (required) Options: --config IDENTIFIER config file identifier (required) -h, --help, --helpfull Show this message and exit. (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cs_tools tools rtql interactive --help Usage: cs_tools tools rtql interactive --config IDENTIFIER [--option, ..., --help] Run an interactive TQL session as if you were on the cluster. TQL is a command line interface for creating schemas and performing basic database administration. For a list of all commands, type \"help\" after invoking tql Options: --autocomplete toggle auto complete feature (default: True) --schema TEXT schema name to use (default: falcon_default_schema) --debug print the entire response to console --timeout INTEGER network call timeout threshold (default: 5.0) --config IDENTIFIER config file identifier (required) -h, --help, --helpfull Show this message and exit.","title":"CLI preview"},{"location":"cs-tools/rtql/#changelog","text":"v1.0.2 2021-08-28 Bugfix tqlservice response uncaught error @boonhapus . Changes History v1.0.1 2021-05-24 Modified Handle clear in the Interactive TQL shell @boonhapus . v1.0.0 2021-05-22 Added Initial release @boonhapus .","title":"Changelog"},{"location":"cs-tools/rtsload/","text":"Remote tsload \u00b6 This solution allows you to interact with the tsload utility from a remote machine. Loading data to ThoughtSpot using this tool happens over an HTTPS connection and thus, all traffic is encrypted. Data loads happen asynchronously. This means that the file command will begin a data load and return once the data has been sent over to the remote server. This data must be then committed to Falcon (which can take time depending on data size). The file command will take care of all of this for you. You may check the status of the data load with the returned cycle id and the status command. Remote tsload enforces privileges You must have at least the Can Manage Data privilege in ThoughtSpot to use this tool. If you are running tsload within on the backend command line, you are most likely signed in under the admin account. CS Tools enhances this security by enforcing privileges based on what user is logged in. CLI preview \u00b6 rtsload --help rtsload file rtsload status (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cs_tools tools rtsload --help Usage: cs_tools tools rtsload [--version, --help] <command> Enable loading files to ThoughtSpot from a remote machine. For further information on tsload, please refer to: https://docs.thoughtspot.com/latest/admin/loading/load-with-tsload.html https://docs.thoughtspot.com/latest/reference/tsload-service-api-ref.html https://docs.thoughtspot.com/latest/reference/data-importer-ref.html Options: --version Show the version and exit. -h, --help, --helpfull Show this message and exit. Commands: file Load a file using the remote tsload service. status Get the status of a data load. (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cs_tools tools rtsload file --help Usage: cs_tools tools rtsload file --config IDENTIFIER [--option, ..., --help] FILE.csv Load a file using the remote tsload service. Arguments: FILE.csv path to file to execute (required) Options: --target_database TEXT specifies the target database into which tsload should load the data (required) --target_table TEXT specifies the target database (required) --target_schema TEXT specifies the target schema (default: falcon_default_schema) --empty_target / --noempty_target data in the target table is to be removed before the new data is loaded (default: --noempty_target) --max_ignored_rows INTEGER maximum number of rows that can be ignored for successful load. If number of ignored rows exceeds this limit, the load is aborted (default: 0) --date_format TEXT format string for date values, accepts format spec by the strptime datetime library (default: %Y-%m-%d) --date_time_format TEXT format string for datetime values, accepts format spec by the strptime datetime library (default: %Y-%m-%d %H:%M:%S) --time_format TEXT format string for time values, accepts format spec by the strptime datetime library (default: %H:%M:%S) --skip_second_fraction when true, skip fractional part of seconds: milliseconds, microseconds, or nanoseconds from either datetime or time values if that level of granularity is present in the source data --field_separator TEXT field delimiter used in the input file (default: |) --null_value TEXT escape character in source data --boolean_representation TEXT format in which boolean values are represented (default: True_False) --has_header_row indicates that the input file contains a header row --escape_character TEXT specifies the escape character used in the input file (default: \") --enclosing_character TEXT enclosing character in csv source format (default: \") --bad_records_file protocol://DEFINITION.toml file to use for storing rows that failed to load --config IDENTIFIER config file identifier (required) -h, --help, --helpfull Show this message and exit. (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cs_tools tools rtsload status --help Usage: cs_tools tools rtsload status --config IDENTIFIER [--option, ..., --help] CYCLE_ID Get the status of a data load. Arguments: CYCLE_ID data load cycle id (required) Options: --bad_records_file protocol://DEFINITION.toml file to use for storing rows that failed to load --config IDENTIFIER config file identifier (required) -h, --help, --helpfull Show this message and exit. Changelog \u00b6 v1.2.0 2022-04-28 Modified input/output using syncers! @boonhapus . Changes History v1.1.0 2021-11-08 Added added many tsload flags @boonhapus . allow retrieval of bad records on failed data loads @boonhapus . v1.0.0 2021-05-22 Added Initial release @boonhapus .","title":"Remote tsload"},{"location":"cs-tools/rtsload/#remote-tsload","text":"This solution allows you to interact with the tsload utility from a remote machine. Loading data to ThoughtSpot using this tool happens over an HTTPS connection and thus, all traffic is encrypted. Data loads happen asynchronously. This means that the file command will begin a data load and return once the data has been sent over to the remote server. This data must be then committed to Falcon (which can take time depending on data size). The file command will take care of all of this for you. You may check the status of the data load with the returned cycle id and the status command. Remote tsload enforces privileges You must have at least the Can Manage Data privilege in ThoughtSpot to use this tool. If you are running tsload within on the backend command line, you are most likely signed in under the admin account. CS Tools enhances this security by enforcing privileges based on what user is logged in.","title":"Remote tsload"},{"location":"cs-tools/rtsload/#cli-preview","text":"rtsload --help rtsload file rtsload status (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cs_tools tools rtsload --help Usage: cs_tools tools rtsload [--version, --help] <command> Enable loading files to ThoughtSpot from a remote machine. For further information on tsload, please refer to: https://docs.thoughtspot.com/latest/admin/loading/load-with-tsload.html https://docs.thoughtspot.com/latest/reference/tsload-service-api-ref.html https://docs.thoughtspot.com/latest/reference/data-importer-ref.html Options: --version Show the version and exit. -h, --help, --helpfull Show this message and exit. Commands: file Load a file using the remote tsload service. status Get the status of a data load. (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cs_tools tools rtsload file --help Usage: cs_tools tools rtsload file --config IDENTIFIER [--option, ..., --help] FILE.csv Load a file using the remote tsload service. Arguments: FILE.csv path to file to execute (required) Options: --target_database TEXT specifies the target database into which tsload should load the data (required) --target_table TEXT specifies the target database (required) --target_schema TEXT specifies the target schema (default: falcon_default_schema) --empty_target / --noempty_target data in the target table is to be removed before the new data is loaded (default: --noempty_target) --max_ignored_rows INTEGER maximum number of rows that can be ignored for successful load. If number of ignored rows exceeds this limit, the load is aborted (default: 0) --date_format TEXT format string for date values, accepts format spec by the strptime datetime library (default: %Y-%m-%d) --date_time_format TEXT format string for datetime values, accepts format spec by the strptime datetime library (default: %Y-%m-%d %H:%M:%S) --time_format TEXT format string for time values, accepts format spec by the strptime datetime library (default: %H:%M:%S) --skip_second_fraction when true, skip fractional part of seconds: milliseconds, microseconds, or nanoseconds from either datetime or time values if that level of granularity is present in the source data --field_separator TEXT field delimiter used in the input file (default: |) --null_value TEXT escape character in source data --boolean_representation TEXT format in which boolean values are represented (default: True_False) --has_header_row indicates that the input file contains a header row --escape_character TEXT specifies the escape character used in the input file (default: \") --enclosing_character TEXT enclosing character in csv source format (default: \") --bad_records_file protocol://DEFINITION.toml file to use for storing rows that failed to load --config IDENTIFIER config file identifier (required) -h, --help, --helpfull Show this message and exit. (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cs_tools tools rtsload status --help Usage: cs_tools tools rtsload status --config IDENTIFIER [--option, ..., --help] CYCLE_ID Get the status of a data load. Arguments: CYCLE_ID data load cycle id (required) Options: --bad_records_file protocol://DEFINITION.toml file to use for storing rows that failed to load --config IDENTIFIER config file identifier (required) -h, --help, --helpfull Show this message and exit.","title":"CLI preview"},{"location":"cs-tools/rtsload/#changelog","text":"v1.2.0 2022-04-28 Modified input/output using syncers! @boonhapus . Changes History v1.1.0 2021-11-08 Added added many tsload flags @boonhapus . allow retrieval of bad records on failed data loads @boonhapus . v1.0.0 2021-05-22 Added Initial release @boonhapus .","title":"Changelog"},{"location":"cs-tools/scriptability/","text":"Scriptability \u00b6 USE AT YOUR OWN RISK! This tool uses private API calls! These could change with any version update and break the provided functionality. Overview \u00b6 This tool allows user to simplify and automate the extract and import of ThoughtSpot TML from and to the same or different instances. There are several use cases where extracting and importing TML is useful: Extract TML for version control. Extract TML for migration to a different ThoughtSpot instance. Extract TML to modify and create copies, such as for different customers or in different languages. This tool creates and updates content. Regular shapshots are recommended When importing content, it is possisible to accidentally overwrite content or create multiple copies of content when you didn't intend to, just by using the wrong parameters. You should make sure you have a snapshot or backup prior to making large changes. Scriptability enforces content rules You must have at least the Can Manage Data privilege in ThoughtSpot to use this tool. When exporting the TML, you will need content permissions to the content to be exported. When importing the TML it will be created as the authenticated user of the tool. This version of cstools scriptability supports the following scenarios: Extract TML based on specific GUIDs (with and without related content) Extract TML based on a ThoughtSpot TAG (with and without related content) Import TML (update and create new) with complex dependency handling (updated) Support a mapping file of GUIDs with automatic updates for new content (new) Compare two TML files for differences (new) Generate an empty mapping file (new) Share and tag content when importing (new) TML is complex and this tool is new. The scriptability tool has been tested in a number of complex scenarios. But TML export and import is complex with a variety of different scenarios. It is anticipated that some scenarios have not been tested for and won't work. Please provide feedback on errors and unsupported scenarios by entering a new issue . Limitations Connections and tables cannot be imported Scriptability doesn't support removal or changes of joins. These must be done manually. Deleting columns with dependencies probably won't work and give dependency errors. The author of new content is the user in the config file, not the original author. In general, any changes with dependencies are likely to cause errors in the current version. Planned features coming soon The following features are planned for an upcoming release: Set the author on import Export and import SQL views (probably won't work, but hasn't been tested) Import connections and tables Helpful Links Scriptability documentation Detailed scenarios \u00b6 Exporting TML Migrate content Updating content Making copies Some customers want to back up the metadata as TML in the file system or a version control system (VCS), such as git . This is done simply by using the scriptability --export and saving the files to a directory. Then you can use the VCS to add the TML. Migrating content consist of exporting, (optionally) modifying, and then importing content. You will want to do the following for this scenario: Create the connection and tables manually if they don't exist. This step is needed because the scriptability tool doesn't currently support connections and tables. Create a mapping file for tables if one doesn't exist. Note that you can use scriptability create-mapping to create a new, empty mapping file. Export the TML to be migrated using scriptability export . (Optional) Modify the TML as appropriate. Import the TML using scriptability import --force-create . The force-create parameter will make sure the content is created as new and not updating existing content. NOTE: To migrate changes, simply leave out the --force-create parameter. New content will automatically be created and existing content (based on the mapping file) will be updated. Updating and reimporting is basically the same steps as migrating new content. In this step you would: Extract the TML using scriptability export . Modify the TML. Import the TML using scriptability import without the --force-create flag. One scenario that comes up is that a ThoughtSpot administrator is managing content for different customers or groups. They have a set of common content, but want to make copies for each group. This can be done similarly to the migration of content, though it's usually back to the same instance. Extract the TML using scriptability export . Modify the TML for the group, such as different column names. Import the TML using scriptability import without the --force-create flag. In this scenario a mapping file may be needed if the content comes from different connections. In that case you may also want separate mapping files for each group to make a copy for. This technique can also be used to localize content. GUID mapping file \u00b6 You will usually need to have an explicit mapping from one GUID to another. This is particularly true of tables if there are more than one with the same name in the system being imported to. If you don't provide the GUID as an FQN in the TML file, you will get an error on import, because ThoughtSpot won't know which table is being referred to. The default name for the GUID mapping file is guid.mapping , but you can use whatever name you like since it's specified as a parameter. The GUID mapping file is only used for importing TML. When creating content, the GUID mapping file is updated as content is created with new GUID mappings. This allows it to be used later for updating content. The GUID mapping file is a TOML file with different sections. The example below shows a starting file with mappings for tables. The top section are values that tell the reader what the mapping file is for. (Meaningful naming of the file is recommended.) The [mappings] section contains mappings from the old GUID to the new GUID. These would be from the source to the destination. name = \"TML Import\" source = \"TS 1\" destination = \"TS 2\" description = \"Mapping file for TML migration.\" version = \"1.1.0\" [mappings] \"7ba07f4c-8756-48ef-bef0-0acc74f361f4\"=\"73bc24b6-d3ff-4dae-bf82-61ae80f03dab\" \"a51f5b23-53c5-4703-ac0c-3bf5af649811\"=\"11767209-e54d-4a26-ae63-92d1ab024051\" \"dace214a-b8d6-46fd-927f-d03c0e06e62f\"=\"5d9bf47d-79b6-45e4-acff-f7d166d2dee0\" Comments are not retained The mapping file is updated and rewritten as new content is created. TOML allows comments, but reading and writing comments is not supported. A future version will have the ability to add some type of content, such as table names for the mappings. CLI preview \u00b6 scriptability --help scriptability compare scriptability create-mapping scriptability export scriptability import (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cs_tools tools scriptability --help Usage: cs_tools tools scriptability <command> [--version, --help] Tool for easily migrating TML between instance. USE AT YOUR OWN RISK! This tool uses private API calls which could change on any version update and break the tool. ThoughtSpot provides the ability to extract object metadata (tables, worksheets, liveboards, etc.) in ThoughtSpot Modeling Language (TML) format, which is a text format based on YAML. These files can then be modified and imported into another (or the same) instance to either create or modify objects. cs_tools tools scriptability --help Options: --version Show the version and exit. --help, --helpfull Show this message and exit. Commands: compare Compares two TML files for differences. create-mapping Create a new, empty mapping file. export Exports TML as YAML from ThoughtSpot. import Import TML from a file or directory into ThoughtSpot. (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cs_tools tools scriptability export --help Usage: cs_tools tools scriptability compare FILE1 FILE2 [--help] Compares two TML files for differences. Arguments: FILE1 full path to the first TML file to compare. FILE2 full path to the second TML file to compare. Options: --help, --helpfull Show this message and exit. (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cs_tools tools scriptability create-mapping --help Usage: cs_tools tools scriptability create-mapping FILE [--help] Create a new, empty mapping file. Arguments: FILE Path to the new mapping file to be created. Existing files will not be overwritten. Options: --help, --helpfull Show this message and exit. (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cs_tools tools scriptability export --help Usage: cs_tools tools scriptability export DIR [--tags, ..., --help] --config NAME Exports TML as YAML from ThoughtSpot. Arguments: DIR full path (directory) to save data set to Options: --tags TAGS comma separated list of tags to export --export-ids GUIDS comma separated list of GUIDs to export --author USERNAME username that is the author of the content to download --export-associated / --no-export-associated if specified, also export related content [default: no-export-associated] --set-fqns / --no-set-fqns if set, then the content in the TML will have FQNs (GUIDs) added. \\[default: no-set-fqns] --config NAME config file identifier --help, --helpfull Show this message and exit. (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cs_tools tools scriptability import --help Usage: cs_tools tools scriptability import FILE_OR_DIR [--import-policy, ..., --help] --config NAME Import TML from a file or directory into ThoughtSpot. Arguments: FILE_OR_DIR full path to the TML file or directory to import. Options: --import-policy [PARTIAL|ALL_OR_NONE|VALIDATE_ONLY] The import policy type \\[default: VALIDATE_ONLY] --force-create / --no-force-create If true, will force a new object to be created. \\[default: no-force- create] --guid-file FILE_OR_DIR Existing or new mapping file to map GUIDs from source instance to target instance. --tags TAGS One or more tags to add to the imported content. --share-with GROUPS One or more groups to share the uploaded content with. --tml-logs DIR full path to the directory to log sent TML. TML can change during load. --config NAME config file identifier --help, --helpfull Show this message and exit. Changelog \u00b6 v1.0.0 2022-04-15 Added Initial release @billdback-ts . v1.1.0 2022-07-19 Added Create an empty mapping file. Compare two TML files. Create content with automatic dependency handling. Update content with automatic dependency handling. Allow new and updated content to be shared with groups during import. Allow tags to be applied to new and updated content during import.","title":"\ud83d\udd10 Scriptability"},{"location":"cs-tools/scriptability/#scriptability","text":"USE AT YOUR OWN RISK! This tool uses private API calls! These could change with any version update and break the provided functionality.","title":"Scriptability"},{"location":"cs-tools/scriptability/#overview","text":"This tool allows user to simplify and automate the extract and import of ThoughtSpot TML from and to the same or different instances. There are several use cases where extracting and importing TML is useful: Extract TML for version control. Extract TML for migration to a different ThoughtSpot instance. Extract TML to modify and create copies, such as for different customers or in different languages. This tool creates and updates content. Regular shapshots are recommended When importing content, it is possisible to accidentally overwrite content or create multiple copies of content when you didn't intend to, just by using the wrong parameters. You should make sure you have a snapshot or backup prior to making large changes. Scriptability enforces content rules You must have at least the Can Manage Data privilege in ThoughtSpot to use this tool. When exporting the TML, you will need content permissions to the content to be exported. When importing the TML it will be created as the authenticated user of the tool. This version of cstools scriptability supports the following scenarios: Extract TML based on specific GUIDs (with and without related content) Extract TML based on a ThoughtSpot TAG (with and without related content) Import TML (update and create new) with complex dependency handling (updated) Support a mapping file of GUIDs with automatic updates for new content (new) Compare two TML files for differences (new) Generate an empty mapping file (new) Share and tag content when importing (new) TML is complex and this tool is new. The scriptability tool has been tested in a number of complex scenarios. But TML export and import is complex with a variety of different scenarios. It is anticipated that some scenarios have not been tested for and won't work. Please provide feedback on errors and unsupported scenarios by entering a new issue . Limitations Connections and tables cannot be imported Scriptability doesn't support removal or changes of joins. These must be done manually. Deleting columns with dependencies probably won't work and give dependency errors. The author of new content is the user in the config file, not the original author. In general, any changes with dependencies are likely to cause errors in the current version. Planned features coming soon The following features are planned for an upcoming release: Set the author on import Export and import SQL views (probably won't work, but hasn't been tested) Import connections and tables Helpful Links Scriptability documentation","title":"Overview"},{"location":"cs-tools/scriptability/#detailed-scenarios","text":"Exporting TML Migrate content Updating content Making copies Some customers want to back up the metadata as TML in the file system or a version control system (VCS), such as git . This is done simply by using the scriptability --export and saving the files to a directory. Then you can use the VCS to add the TML. Migrating content consist of exporting, (optionally) modifying, and then importing content. You will want to do the following for this scenario: Create the connection and tables manually if they don't exist. This step is needed because the scriptability tool doesn't currently support connections and tables. Create a mapping file for tables if one doesn't exist. Note that you can use scriptability create-mapping to create a new, empty mapping file. Export the TML to be migrated using scriptability export . (Optional) Modify the TML as appropriate. Import the TML using scriptability import --force-create . The force-create parameter will make sure the content is created as new and not updating existing content. NOTE: To migrate changes, simply leave out the --force-create parameter. New content will automatically be created and existing content (based on the mapping file) will be updated. Updating and reimporting is basically the same steps as migrating new content. In this step you would: Extract the TML using scriptability export . Modify the TML. Import the TML using scriptability import without the --force-create flag. One scenario that comes up is that a ThoughtSpot administrator is managing content for different customers or groups. They have a set of common content, but want to make copies for each group. This can be done similarly to the migration of content, though it's usually back to the same instance. Extract the TML using scriptability export . Modify the TML for the group, such as different column names. Import the TML using scriptability import without the --force-create flag. In this scenario a mapping file may be needed if the content comes from different connections. In that case you may also want separate mapping files for each group to make a copy for. This technique can also be used to localize content.","title":"Detailed scenarios"},{"location":"cs-tools/scriptability/#guid-mapping-file","text":"You will usually need to have an explicit mapping from one GUID to another. This is particularly true of tables if there are more than one with the same name in the system being imported to. If you don't provide the GUID as an FQN in the TML file, you will get an error on import, because ThoughtSpot won't know which table is being referred to. The default name for the GUID mapping file is guid.mapping , but you can use whatever name you like since it's specified as a parameter. The GUID mapping file is only used for importing TML. When creating content, the GUID mapping file is updated as content is created with new GUID mappings. This allows it to be used later for updating content. The GUID mapping file is a TOML file with different sections. The example below shows a starting file with mappings for tables. The top section are values that tell the reader what the mapping file is for. (Meaningful naming of the file is recommended.) The [mappings] section contains mappings from the old GUID to the new GUID. These would be from the source to the destination. name = \"TML Import\" source = \"TS 1\" destination = \"TS 2\" description = \"Mapping file for TML migration.\" version = \"1.1.0\" [mappings] \"7ba07f4c-8756-48ef-bef0-0acc74f361f4\"=\"73bc24b6-d3ff-4dae-bf82-61ae80f03dab\" \"a51f5b23-53c5-4703-ac0c-3bf5af649811\"=\"11767209-e54d-4a26-ae63-92d1ab024051\" \"dace214a-b8d6-46fd-927f-d03c0e06e62f\"=\"5d9bf47d-79b6-45e4-acff-f7d166d2dee0\" Comments are not retained The mapping file is updated and rewritten as new content is created. TOML allows comments, but reading and writing comments is not supported. A future version will have the ability to add some type of content, such as table names for the mappings.","title":"GUID mapping file"},{"location":"cs-tools/scriptability/#cli-preview","text":"scriptability --help scriptability compare scriptability create-mapping scriptability export scriptability import (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cs_tools tools scriptability --help Usage: cs_tools tools scriptability <command> [--version, --help] Tool for easily migrating TML between instance. USE AT YOUR OWN RISK! This tool uses private API calls which could change on any version update and break the tool. ThoughtSpot provides the ability to extract object metadata (tables, worksheets, liveboards, etc.) in ThoughtSpot Modeling Language (TML) format, which is a text format based on YAML. These files can then be modified and imported into another (or the same) instance to either create or modify objects. cs_tools tools scriptability --help Options: --version Show the version and exit. --help, --helpfull Show this message and exit. Commands: compare Compares two TML files for differences. create-mapping Create a new, empty mapping file. export Exports TML as YAML from ThoughtSpot. import Import TML from a file or directory into ThoughtSpot. (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cs_tools tools scriptability export --help Usage: cs_tools tools scriptability compare FILE1 FILE2 [--help] Compares two TML files for differences. Arguments: FILE1 full path to the first TML file to compare. FILE2 full path to the second TML file to compare. Options: --help, --helpfull Show this message and exit. (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cs_tools tools scriptability create-mapping --help Usage: cs_tools tools scriptability create-mapping FILE [--help] Create a new, empty mapping file. Arguments: FILE Path to the new mapping file to be created. Existing files will not be overwritten. Options: --help, --helpfull Show this message and exit. (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cs_tools tools scriptability export --help Usage: cs_tools tools scriptability export DIR [--tags, ..., --help] --config NAME Exports TML as YAML from ThoughtSpot. Arguments: DIR full path (directory) to save data set to Options: --tags TAGS comma separated list of tags to export --export-ids GUIDS comma separated list of GUIDs to export --author USERNAME username that is the author of the content to download --export-associated / --no-export-associated if specified, also export related content [default: no-export-associated] --set-fqns / --no-set-fqns if set, then the content in the TML will have FQNs (GUIDs) added. \\[default: no-set-fqns] --config NAME config file identifier --help, --helpfull Show this message and exit. (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cs_tools tools scriptability import --help Usage: cs_tools tools scriptability import FILE_OR_DIR [--import-policy, ..., --help] --config NAME Import TML from a file or directory into ThoughtSpot. Arguments: FILE_OR_DIR full path to the TML file or directory to import. Options: --import-policy [PARTIAL|ALL_OR_NONE|VALIDATE_ONLY] The import policy type \\[default: VALIDATE_ONLY] --force-create / --no-force-create If true, will force a new object to be created. \\[default: no-force- create] --guid-file FILE_OR_DIR Existing or new mapping file to map GUIDs from source instance to target instance. --tags TAGS One or more tags to add to the imported content. --share-with GROUPS One or more groups to share the uploaded content with. --tml-logs DIR full path to the directory to log sent TML. TML can change during load. --config NAME config file identifier --help, --helpfull Show this message and exit.","title":"CLI preview"},{"location":"cs-tools/scriptability/#changelog","text":"v1.0.0 2022-04-15 Added Initial release @billdback-ts . v1.1.0 2022-07-19 Added Create an empty mapping file. Compare two TML files. Create content with automatic dependency handling. Update content with automatic dependency handling. Allow new and updated content to be shared with groups during import. Allow tags to be applied to new and updated content during import.","title":"Changelog"},{"location":"cs-tools/searchable/","text":".tabbed-block ul ul ul { columns: 3; } Searchable Content \u00b6 As your platform grows, it can oftentimes be useful to keep track of how much content is created within the system. For example, tracking the amount of answers or liveboards created over time can help you understand how your Users interact with ThoughtSpot . Another use case might be to set up a liveboard gating conditions based on when or how often a user uploads data (eg. a combination of metadata type of \"imported data\", the metadata object's modified/created time and the ThoughtSpot datetime function today() ). This could give you early warning when a user is missing a dataset that could provide value to others in your platform. ThoughtSpot Data Model full schema diagram for the searchable ThoughtSpot metadata CLI preview \u00b6 searchable --help searchable gather searchable bi-server (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cs_tools tools searchable --help Usage: cs_tools tools searchable [--help] <command> Explore your ThoughtSpot metadata, in ThoughtSpot! Options: --version Show the version and exit. -h, --help, --helpfull Show this message and exit. Commands: bi-server Extract usage statistics from your ThoughtSpot platform. gather Extract metadata from your ThoughtSpot platform. (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cs_tools tools searchable gather --help Usage: cs_tools tools searchable gather --config IDENTIFIER [--option, ..., --help] protocol://DEFINITION.toml Extract metadata from your ThoughtSpot platform. See the full data model extract at the link below: https://thoughtspot.github.io/cs_tools/cs-tools/searchable Arguments: protocol://DEFINITION.toml protocol and path for options to pass to the syncer (required) Options: --include-columns ... --config IDENTIFIER config file identifier (required) -h, --help, --helpfull Show this message and exit. (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cs_tools tools searchable bi-server --help Usage: cs_tools tools searchable bi-server --config IDENTIFIER [--option, ..., --help] protocol://DEFINITION.toml Extract usage statistics from your ThoughtSpot platform. Fields extracted from TS: BI Server - incident id - timestamp detailed - url - http response code - browser type - client type - client id - answer book guid - viz id - user id - user action - query text - response size - latency (us) - database latency (us) - impressions Arguments: protocol://DEFINITION.toml protocol and path for options to pass to the syncer (required) Options: --from-date YYYY-MM-DD lower bound of rows to select from TS: BI Server --to-date YYYY-MM-DD upper bound of rows to select from TS: BI Server --include-today if set, pull partial day data --compact / --full if compact, exclude NULL and INVALID user actions (default: compact) --config IDENTIFIER config file identifier (required) -h, --help, --helpfull Show this message and exit. Changelog \u00b6 v1.3.0 2022-04-28 Modified now known as simply Searchable, searchable includes metadata about.. Tables Views Worksheets Columns & Formulas Answers Liveboards Dependencies Users Groups Privileges Tags Access Control TS: BI Server Changes History v1.2.1 2021-11-09 Modified now known as Searchable Content, searchable-content --save_path is now --export @boonhapus . tml is now spotapp @boonhapus . v1.2.0 2021-09-11 Modified ALTER TABLE to support column dependencies @boonhapus . support for large clusters with API call batching @boonhapus . v1.1.0 2021-05-25 Modified Migrated to new app structure @boonhapus . v1.0.0 2020-08-18 Added Initial re-release @boonhapus .","title":"Searchable"},{"location":"cs-tools/searchable/#searchable-content","text":"As your platform grows, it can oftentimes be useful to keep track of how much content is created within the system. For example, tracking the amount of answers or liveboards created over time can help you understand how your Users interact with ThoughtSpot . Another use case might be to set up a liveboard gating conditions based on when or how often a user uploads data (eg. a combination of metadata type of \"imported data\", the metadata object's modified/created time and the ThoughtSpot datetime function today() ). This could give you early warning when a user is missing a dataset that could provide value to others in your platform. ThoughtSpot Data Model full schema diagram for the searchable ThoughtSpot metadata","title":"Searchable Content"},{"location":"cs-tools/searchable/#cli-preview","text":"searchable --help searchable gather searchable bi-server (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cs_tools tools searchable --help Usage: cs_tools tools searchable [--help] <command> Explore your ThoughtSpot metadata, in ThoughtSpot! Options: --version Show the version and exit. -h, --help, --helpfull Show this message and exit. Commands: bi-server Extract usage statistics from your ThoughtSpot platform. gather Extract metadata from your ThoughtSpot platform. (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cs_tools tools searchable gather --help Usage: cs_tools tools searchable gather --config IDENTIFIER [--option, ..., --help] protocol://DEFINITION.toml Extract metadata from your ThoughtSpot platform. See the full data model extract at the link below: https://thoughtspot.github.io/cs_tools/cs-tools/searchable Arguments: protocol://DEFINITION.toml protocol and path for options to pass to the syncer (required) Options: --include-columns ... --config IDENTIFIER config file identifier (required) -h, --help, --helpfull Show this message and exit. (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cs_tools tools searchable bi-server --help Usage: cs_tools tools searchable bi-server --config IDENTIFIER [--option, ..., --help] protocol://DEFINITION.toml Extract usage statistics from your ThoughtSpot platform. Fields extracted from TS: BI Server - incident id - timestamp detailed - url - http response code - browser type - client type - client id - answer book guid - viz id - user id - user action - query text - response size - latency (us) - database latency (us) - impressions Arguments: protocol://DEFINITION.toml protocol and path for options to pass to the syncer (required) Options: --from-date YYYY-MM-DD lower bound of rows to select from TS: BI Server --to-date YYYY-MM-DD upper bound of rows to select from TS: BI Server --include-today if set, pull partial day data --compact / --full if compact, exclude NULL and INVALID user actions (default: compact) --config IDENTIFIER config file identifier (required) -h, --help, --helpfull Show this message and exit.","title":"CLI preview"},{"location":"cs-tools/searchable/#changelog","text":"v1.3.0 2022-04-28 Modified now known as simply Searchable, searchable includes metadata about.. Tables Views Worksheets Columns & Formulas Answers Liveboards Dependencies Users Groups Privileges Tags Access Control TS: BI Server Changes History v1.2.1 2021-11-09 Modified now known as Searchable Content, searchable-content --save_path is now --export @boonhapus . tml is now spotapp @boonhapus . v1.2.0 2021-09-11 Modified ALTER TABLE to support column dependencies @boonhapus . support for large clusters with API call batching @boonhapus . v1.1.0 2021-05-25 Modified Migrated to new app structure @boonhapus . v1.0.0 2020-08-18 Added Initial re-release @boonhapus .","title":"Changelog"},{"location":"cs-tools/security-sharing/","text":"Security Sharing \u00b6 This solution allows you to quickly manage column-level and table-level security models within an easy to manipulate user interface. Setting up Column Level Security (especially on larger tables) can be time-consuming when done directly in the ThoughtSpot user interface. The web interface provided by this tool will allow you to quickly understand the current security settings for a given table across all columns, and as many groups as are in your platform. You may then set the appropriate security settings for those group-table combinations. User Interface preview \u00b6 CLI preview \u00b6 security-sharing --help security-sharing run security-sharing share (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cs_tools tools security-sharing --help Usage: cs_tools tools security-sharing [--version, --help] <command> Scalably manage your table- and column-level security right in the browser. Setting up Column Level Security (especially on larger tables) can be time-consuming when done directly in the ThoughtSpot user interface. The web interface provided by this tool will allow you to quickly understand the current security settings for a given table across all columns, and as many groups as are in your platform. You may then set the appropriate security settings for those group-table combinations. Options: --version Show the version and exit. -h, --help Show this message and exit. Commands: run Start the built-in webserver which runs the security management interface. share Share database tables with groups. (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cs_tools tools security-sharing run --help Usage: cs_tools tools security-sharing run [--option, ..., --help] Start the built-in webserver which runs the security management interface. Options: --webserver-port INTEGER port to host the webserver on (default: 5000) --helpfull Show the full help message and exit. -h, --help Show this message and exit. (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cs_tools tools security-sharing share --help Usage: cs_tools tools security-sharing share [--option, ..., --help] Share database tables with groups. Options: --group TEXT group to share with (required) --permission (view|edit|remove) permission type to assign (required) --database TEXT name of database of tables to share (required) --schema TEXT name of schema of tables to share (default: falcon_default_schema) --table TEXT name of the table to share, if not provided then share all tables --helpfull Show the full help message and exit. -h, --help Show this message and exit. Changelog \u00b6 v1.0.0 2021-08-17 Added Initial release from @mishathoughtspot .","title":"Security Sharing"},{"location":"cs-tools/security-sharing/#security-sharing","text":"This solution allows you to quickly manage column-level and table-level security models within an easy to manipulate user interface. Setting up Column Level Security (especially on larger tables) can be time-consuming when done directly in the ThoughtSpot user interface. The web interface provided by this tool will allow you to quickly understand the current security settings for a given table across all columns, and as many groups as are in your platform. You may then set the appropriate security settings for those group-table combinations.","title":"Security Sharing"},{"location":"cs-tools/security-sharing/#user-interface-preview","text":"","title":"User Interface preview"},{"location":"cs-tools/security-sharing/#cli-preview","text":"security-sharing --help security-sharing run security-sharing share (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cs_tools tools security-sharing --help Usage: cs_tools tools security-sharing [--version, --help] <command> Scalably manage your table- and column-level security right in the browser. Setting up Column Level Security (especially on larger tables) can be time-consuming when done directly in the ThoughtSpot user interface. The web interface provided by this tool will allow you to quickly understand the current security settings for a given table across all columns, and as many groups as are in your platform. You may then set the appropriate security settings for those group-table combinations. Options: --version Show the version and exit. -h, --help Show this message and exit. Commands: run Start the built-in webserver which runs the security management interface. share Share database tables with groups. (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cs_tools tools security-sharing run --help Usage: cs_tools tools security-sharing run [--option, ..., --help] Start the built-in webserver which runs the security management interface. Options: --webserver-port INTEGER port to host the webserver on (default: 5000) --helpfull Show the full help message and exit. -h, --help Show this message and exit. (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cs_tools tools security-sharing share --help Usage: cs_tools tools security-sharing share [--option, ..., --help] Share database tables with groups. Options: --group TEXT group to share with (required) --permission (view|edit|remove) permission type to assign (required) --database TEXT name of database of tables to share (required) --schema TEXT name of schema of tables to share (default: falcon_default_schema) --table TEXT name of the table to share, if not provided then share all tables --helpfull Show the full help message and exit. -h, --help Show this message and exit.","title":"CLI preview"},{"location":"cs-tools/security-sharing/#changelog","text":"v1.0.0 2021-08-17 Added Initial release from @mishathoughtspot .","title":"Changelog"},{"location":"cs-tools/sharding-recommender/","text":"Sharding Recommender \u00b6 USE AT YOUR OWN RISK! This tool uses private API calls! These could change with any version update and break the provided functionality. This solution allows you to extract key data about Falcon tables to help guide on the optimal number of shards for each table. Ideally, once implemented, you will run it on a regular basis, with a plan to review the liveboard once every few months (depending on data volume growth). Currently, this solution does not consider co-sharding as part of the output. If you are not comfortable with the sharding, or want to learn more about what benefit sharding brings you, please reach out to your CSM or schedule an Office Hours session through the community page and we'll help guide you through the process. Liveboard preview \u00b6 CLI preview \u00b6 sharding-recommender --help sharding-recommender gather sharding-recommender spotapp (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cstools tools sharding-recommender --help Usage: cstools tools sharding-recommender [--version, --help] <command> Gather data on your existing Falcon tables for sharding. USE AT YOUR OWN RISK! This tool uses private API calls which could change on any version update and break the tool. Once tables grow sufficiently large within a Falcon deployment, cluster performance and data loading can be enhanced through the use of sharding. The choice of what column to shards and how many shards to use can vary based on many factors. This tool helps expose that key information. Before sharding, it can be helpful to implement this solution and consult with your ThoughtSpot contact for guidance on the best shard key and number of shards to use. For further information on sharding, please refer to: https://docs.thoughtspot.com/latest/admin/loading/sharding.html Options: --version Show the version and exit. -h, --help, --helpfull Show this message and exit. Commands: gather Extract Falcon table info from your ThoughtSpot platform. spotapp Exports the SpotApp associated with this tool. (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cstools tools sharding-recommender gather --help Usage: cstools tools sharding-recommender gather --config IDENTIFIER [--option, ..., --help] protocol://DEFINITION.toml Extract Falcon table info from your ThoughtSpot platform. Arguments: protocol://DEFINITION.toml protocol and path for options to pass to the syncer (required) Options: --config IDENTIFIER config file identifier (required) -h, --help, --helpfull Show this message and exit. (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cstools tools sharding-recommender spotapp --help Usage: cstools tools sharding-recommender spotapp [--option, ..., --help] DIRECTORY Exports the SpotApp associated with this tool. Arguments: DIRECTORY location on your machine to copy the SpotApp to (required) Options: --nodes INTEGER number of nodes serving your ThoughtSpot cluster (required) --cpu-per-node INTEGER number of CPUs serving each node (default: 56) --threshold INTEGER unsharded row threshold, once exceeded a table will be a candidate for sharding (default: 55000000) --ideal-rows INTEGER ideal rows per shard (default: 20000000) --min-rows INTEGER minumum rows per shard (default: 15000000) --max-rows INTEGER maximum rows per shard (default: 20000000) -h, --help, --helpfull Show this message and exit. Changelog \u00b6 v1.2.0 2022-04-28 Added Modified SpotApp parameters, customize the spot app to your specific ThoughtSpot instance input/output using syncers! @boonhapus . Changes History v1.1.2 2021-11-09 Modified --save_path is now --export @boonhapus . tml is now spotapp @boonhapus . v1.1.1 2021-09-11 Modified support for large clusters with API call batching @boonhapus . v1.0.1 2021-05-22 Modified Migrated to new app structure @boonhapus . v1.0.0 2020-08-18 Added Initial release @boonhapus .","title":"\ud83d\udd10 Sharding Recommender"},{"location":"cs-tools/sharding-recommender/#sharding-recommender","text":"USE AT YOUR OWN RISK! This tool uses private API calls! These could change with any version update and break the provided functionality. This solution allows you to extract key data about Falcon tables to help guide on the optimal number of shards for each table. Ideally, once implemented, you will run it on a regular basis, with a plan to review the liveboard once every few months (depending on data volume growth). Currently, this solution does not consider co-sharding as part of the output. If you are not comfortable with the sharding, or want to learn more about what benefit sharding brings you, please reach out to your CSM or schedule an Office Hours session through the community page and we'll help guide you through the process.","title":"Sharding Recommender"},{"location":"cs-tools/sharding-recommender/#liveboard-preview","text":"","title":"Liveboard preview"},{"location":"cs-tools/sharding-recommender/#cli-preview","text":"sharding-recommender --help sharding-recommender gather sharding-recommender spotapp (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cstools tools sharding-recommender --help Usage: cstools tools sharding-recommender [--version, --help] <command> Gather data on your existing Falcon tables for sharding. USE AT YOUR OWN RISK! This tool uses private API calls which could change on any version update and break the tool. Once tables grow sufficiently large within a Falcon deployment, cluster performance and data loading can be enhanced through the use of sharding. The choice of what column to shards and how many shards to use can vary based on many factors. This tool helps expose that key information. Before sharding, it can be helpful to implement this solution and consult with your ThoughtSpot contact for guidance on the best shard key and number of shards to use. For further information on sharding, please refer to: https://docs.thoughtspot.com/latest/admin/loading/sharding.html Options: --version Show the version and exit. -h, --help, --helpfull Show this message and exit. Commands: gather Extract Falcon table info from your ThoughtSpot platform. spotapp Exports the SpotApp associated with this tool. (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cstools tools sharding-recommender gather --help Usage: cstools tools sharding-recommender gather --config IDENTIFIER [--option, ..., --help] protocol://DEFINITION.toml Extract Falcon table info from your ThoughtSpot platform. Arguments: protocol://DEFINITION.toml protocol and path for options to pass to the syncer (required) Options: --config IDENTIFIER config file identifier (required) -h, --help, --helpfull Show this message and exit. (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cstools tools sharding-recommender spotapp --help Usage: cstools tools sharding-recommender spotapp [--option, ..., --help] DIRECTORY Exports the SpotApp associated with this tool. Arguments: DIRECTORY location on your machine to copy the SpotApp to (required) Options: --nodes INTEGER number of nodes serving your ThoughtSpot cluster (required) --cpu-per-node INTEGER number of CPUs serving each node (default: 56) --threshold INTEGER unsharded row threshold, once exceeded a table will be a candidate for sharding (default: 55000000) --ideal-rows INTEGER ideal rows per shard (default: 20000000) --min-rows INTEGER minumum rows per shard (default: 15000000) --max-rows INTEGER maximum rows per shard (default: 20000000) -h, --help, --helpfull Show this message and exit.","title":"CLI preview"},{"location":"cs-tools/sharding-recommender/#changelog","text":"v1.2.0 2022-04-28 Added Modified SpotApp parameters, customize the spot app to your specific ThoughtSpot instance input/output using syncers! @boonhapus . Changes History v1.1.2 2021-11-09 Modified --save_path is now --export @boonhapus . tml is now spotapp @boonhapus . v1.1.1 2021-09-11 Modified support for large clusters with API call batching @boonhapus . v1.0.1 2021-05-22 Modified Migrated to new app structure @boonhapus . v1.0.0 2020-08-18 Added Initial release @boonhapus .","title":"Changelog"},{"location":"cs-tools/user-management/","text":"User Management \u00b6 Users and Groups can be managed on an individual basis in the Admin panel of your ThoughtSpot platform. Users may also be onboarded automatically upon successful authentication with one of our supported Identity Providers. However, bulk management of users otherwise is often difficult or requirements scripting. These User Management tools will help you migrate users, sync them from external source systems, or transfer all content from one user to another. All of which are common activities when onboarding or offboarding many users at once. CLI preview \u00b6 user-management --help user-management rename user-management sync user-management transfer (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cs_tools tools user-management --help Usage: cs_tools tools user-management [--version, --help] <command> Managing Users and Groups in bulk. Options: --version Show the version and exit. -h, --help, --helpfull Show this message and exit. Commands: rename Remap Users from one username to another. sync Sync your Users and Groups from an external data source. transfer Transfer ownership of objects from one User to another. (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cs_tools tools user-management rename --help Usage: cs_tools tools user-management rename --config IDENTIFIER [--option, ..., --help] Remap Users from one username to another. If you are renaming from an external data source, your data must follow the tabular format below. +----------------+---------------------------+ | from_username | to_username | +----------------+---------------------------+ | cs_tools | cstools | | namey.namerson | namey@thoughtspot.com | | fake.user | fake.user@thoughtspot.com | +----------------+---------------------------+ Options: --from TEXT current username --to TEXT new username --syncer protocol://DEFINITION.toml protocol and path for options to pass to the syncer --remapping TEXT if using --syncer, directive to find user remapping at --config IDENTIFIER config file identifier (required) -h, --help, --helpfull Show this message and exit. (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cs_tools tools user-management sync --help Usage: cs_tools tools user-management sync --config IDENTIFIER [--option, ..., --help] protocol://DEFINITION.toml Sync your Users and Groups from an external data source. During this operation, Users and Groups.. - present in ThoughtSpot, but not present in Syncer are deleted in ThoughtSpot - if using the --no-remove-deleted flag, users will not be deleted in this case - not present in ThoughtSpot, but present in Syncer are created in ThoughtSpot - present in ThoughtSpot, and in Syncer are updated by their attributes - this includes group membership Arguments: protocol://DEFINITION.toml protocol and path for options to pass to the syncer (required) Options: --users TEXT directive to find users to sync at (default: ts_auth_sync_users) --groups TEXT directive to find groups to sync at (default: ts_auth_sync_groups) --associations TEXT directive to find associations to sync at (default: ts_auth_sync_xref) --apply-changes whether or not to sync the security strategy into ThoughtSpot --new-user-password TEXT password for new users added during the sync operation --dont-remove-deleted / --remove-deleted whether to remove the deleted users and user groups --export whether or not to dump data to the syncer --config IDENTIFIER config file identifier (required) -h, --help, --helpfull Show this message and exit. (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cs_tools tools user-management transfer --help Usage: cs_tools tools user-management transfer --config IDENTIFIER [--option, ..., --help] Transfer ownership of objects from one User to another. Tags and GUIDs constraints are applied in OR fashion. Options: --from TEXT username of the current content owner (required) --to TEXT username to transfer content to (required) --tag TEXT if specified, only move content marked with one or more of these tags --guids TEXT if specified, only move specific objects --config IDENTIFIER config file identifier (required) -h, --help, --helpfull Show this message and exit. Changelog \u00b6 v1.2.0 2022-04-28 Added Modified migrated User Tools to CS Tools under sync added user renaming as rename input/output using syncers! @boonhapus . Changes History v1.1.0 2021-11-01 Added Modified support for limited transfer of objects identified by GUID, or tag @boonhapus . --from and --to options moved to required arugments v1.0.0 2021-05-25 Added Initial release @boonhapus .","title":"User Management"},{"location":"cs-tools/user-management/#user-management","text":"Users and Groups can be managed on an individual basis in the Admin panel of your ThoughtSpot platform. Users may also be onboarded automatically upon successful authentication with one of our supported Identity Providers. However, bulk management of users otherwise is often difficult or requirements scripting. These User Management tools will help you migrate users, sync them from external source systems, or transfer all content from one user to another. All of which are common activities when onboarding or offboarding many users at once.","title":"User Management"},{"location":"cs-tools/user-management/#cli-preview","text":"user-management --help user-management rename user-management sync user-management transfer (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cs_tools tools user-management --help Usage: cs_tools tools user-management [--version, --help] <command> Managing Users and Groups in bulk. Options: --version Show the version and exit. -h, --help, --helpfull Show this message and exit. Commands: rename Remap Users from one username to another. sync Sync your Users and Groups from an external data source. transfer Transfer ownership of objects from one User to another. (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cs_tools tools user-management rename --help Usage: cs_tools tools user-management rename --config IDENTIFIER [--option, ..., --help] Remap Users from one username to another. If you are renaming from an external data source, your data must follow the tabular format below. +----------------+---------------------------+ | from_username | to_username | +----------------+---------------------------+ | cs_tools | cstools | | namey.namerson | namey@thoughtspot.com | | fake.user | fake.user@thoughtspot.com | +----------------+---------------------------+ Options: --from TEXT current username --to TEXT new username --syncer protocol://DEFINITION.toml protocol and path for options to pass to the syncer --remapping TEXT if using --syncer, directive to find user remapping at --config IDENTIFIER config file identifier (required) -h, --help, --helpfull Show this message and exit. (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cs_tools tools user-management sync --help Usage: cs_tools tools user-management sync --config IDENTIFIER [--option, ..., --help] protocol://DEFINITION.toml Sync your Users and Groups from an external data source. During this operation, Users and Groups.. - present in ThoughtSpot, but not present in Syncer are deleted in ThoughtSpot - if using the --no-remove-deleted flag, users will not be deleted in this case - not present in ThoughtSpot, but present in Syncer are created in ThoughtSpot - present in ThoughtSpot, and in Syncer are updated by their attributes - this includes group membership Arguments: protocol://DEFINITION.toml protocol and path for options to pass to the syncer (required) Options: --users TEXT directive to find users to sync at (default: ts_auth_sync_users) --groups TEXT directive to find groups to sync at (default: ts_auth_sync_groups) --associations TEXT directive to find associations to sync at (default: ts_auth_sync_xref) --apply-changes whether or not to sync the security strategy into ThoughtSpot --new-user-password TEXT password for new users added during the sync operation --dont-remove-deleted / --remove-deleted whether to remove the deleted users and user groups --export whether or not to dump data to the syncer --config IDENTIFIER config file identifier (required) -h, --help, --helpfull Show this message and exit. (.cs_tools) C:\\work\\thoughtspot\\cs_tools>cs_tools tools user-management transfer --help Usage: cs_tools tools user-management transfer --config IDENTIFIER [--option, ..., --help] Transfer ownership of objects from one User to another. Tags and GUIDs constraints are applied in OR fashion. Options: --from TEXT username of the current content owner (required) --to TEXT username to transfer content to (required) --tag TEXT if specified, only move content marked with one or more of these tags --guids TEXT if specified, only move specific objects --config IDENTIFIER config file identifier (required) -h, --help, --helpfull Show this message and exit.","title":"CLI preview"},{"location":"cs-tools/user-management/#changelog","text":"v1.2.0 2022-04-28 Added Modified migrated User Tools to CS Tools under sync added user renaming as rename input/output using syncers! @boonhapus . Changes History v1.1.0 2021-11-01 Added Modified support for limited transfer of objects identified by GUID, or tag @boonhapus . --from and --to options moved to required arugments v1.0.0 2021-05-25 Added Initial release @boonhapus .","title":"Changelog"},{"location":"for-developers/build-cs-tools/","text":"For development setup and installs, we use poetry \u00b6 Dependency management is hard. DM against the below support matrix harder. Support Matrix \u00b6 Python Versions: py368, py37, py39, py310, soon: py311 Platforms: OSX, Linux, Windows Development setup \u00b6 consider pyenv (or pyenv-win) what is pyenv? it's a way to manage multiple python versions on your local machine this does not replace virtual environments! think of this as a way to have multiple global python environments on the same box priority order: SHELL --> LOCAL --> GLOBAL --> SYSTEM useful commands pyenv versions :: show all installed versions & active version pyenv shell :: set your python version for this shell session pyenv local :: set your default python version for this directory pyenv global :: set your default python version across the system consider poetry what is poetry? it's a way to manage dependencies for python projects, dependency resolution is HARD py37+ as of poetry==1.2.0 useful commands peotry add :: add a package to your dependencies, --dev for dev dependencies peotry install :: read, resolve, and install dependencies, generate a lockfile after resolution poetry update :: get the latest versions of the dependencies and to update the lockfile poetry shell :: spawn a shell, if a virtual env doesn't exist, create one from your current python version poetry build :: --format wheel, build a distributable .whl file consider global packages nox <--- automation across multiple python versions flake8 <--- linting mypy <--- static type-checking black <--- code formatting https://medium.com/@cjolowicz/nox-is-a-part-of-your-global-developer-environment-like-poetry-pre-commit-pyenv-or-pipx-1cdeba9198bd Install \u00b6 get poetry | python - poetry install poetry show Adding / Updating a dependency \u00b6 poetry add --dry-run DEPENDENCY poetry update --dry-run // alternate useful versions - poetry add --dry-run --dev DEPENDENCY - poetry add https://github.com/thoughtspot/cs_tools.git - poetry add https://github.com/thoughtspot/cs_tools.git#v1.3.2 - poetry add https://github.com/thoughtspot/cs_tools.git#my-release-branch Deploy a release \u00b6 poetry check poetry run code-quality isort, black, nox, ward, coverage poetry run build https://python-poetry.org/docs/cli/#version https://github.com/python-poetry/poetry/issues/273#issuecomment-767221679 https://github.com/python-poetry/poetry/issues/273#issuecomment-1103812336 poetry build --format wheel poetry export -f requirements.txt --output requirements.txt check if client requirementstxt output has changed need to add cs_tools to the client-install lockfile // hmm... https://python-poetry.org/docs/dependency-specification/#git-dependencies https://github.com/python-poetry/poetry/issues/558#issuecomment-481064864 https://github.com/python-poetry/poetry/issues/76#issuecomment-385439995 - poetry install --no-dev --no-root remote: https://github.com/python-poetry/poetry/blob/master/install-poetry.py | python - local: python install-poetry.py --path ... --path Install from a given path (file or directory) instead of fetching the latest version of Poetry available online. can vendor the latest releases: https://github.com/python-poetry/poetry/releases/tag/1.1.13 CI / CD \u00b6 https://github.com/python-poetry/poetry/blob/master/.github/workflows/main.yml Plugins eventually ? \u00b6 https://www.youtube.com/watch?v=fY3Y_xPKWNA","title":"For development setup and installs, we use `poetry`"},{"location":"for-developers/build-cs-tools/#for-development-setup-and-installs-we-use-poetry","text":"Dependency management is hard. DM against the below support matrix harder.","title":"For development setup and installs, we use poetry"},{"location":"for-developers/build-cs-tools/#support-matrix","text":"Python Versions: py368, py37, py39, py310, soon: py311 Platforms: OSX, Linux, Windows","title":"Support Matrix"},{"location":"for-developers/build-cs-tools/#development-setup","text":"consider pyenv (or pyenv-win) what is pyenv? it's a way to manage multiple python versions on your local machine this does not replace virtual environments! think of this as a way to have multiple global python environments on the same box priority order: SHELL --> LOCAL --> GLOBAL --> SYSTEM useful commands pyenv versions :: show all installed versions & active version pyenv shell :: set your python version for this shell session pyenv local :: set your default python version for this directory pyenv global :: set your default python version across the system consider poetry what is poetry? it's a way to manage dependencies for python projects, dependency resolution is HARD py37+ as of poetry==1.2.0 useful commands peotry add :: add a package to your dependencies, --dev for dev dependencies peotry install :: read, resolve, and install dependencies, generate a lockfile after resolution poetry update :: get the latest versions of the dependencies and to update the lockfile poetry shell :: spawn a shell, if a virtual env doesn't exist, create one from your current python version poetry build :: --format wheel, build a distributable .whl file consider global packages nox <--- automation across multiple python versions flake8 <--- linting mypy <--- static type-checking black <--- code formatting https://medium.com/@cjolowicz/nox-is-a-part-of-your-global-developer-environment-like-poetry-pre-commit-pyenv-or-pipx-1cdeba9198bd","title":"Development setup"},{"location":"for-developers/build-cs-tools/#install","text":"get poetry | python - poetry install poetry show","title":"Install"},{"location":"for-developers/build-cs-tools/#adding-updating-a-dependency","text":"poetry add --dry-run DEPENDENCY poetry update --dry-run // alternate useful versions - poetry add --dry-run --dev DEPENDENCY - poetry add https://github.com/thoughtspot/cs_tools.git - poetry add https://github.com/thoughtspot/cs_tools.git#v1.3.2 - poetry add https://github.com/thoughtspot/cs_tools.git#my-release-branch","title":"Adding / Updating a dependency"},{"location":"for-developers/build-cs-tools/#deploy-a-release","text":"poetry check poetry run code-quality isort, black, nox, ward, coverage poetry run build https://python-poetry.org/docs/cli/#version https://github.com/python-poetry/poetry/issues/273#issuecomment-767221679 https://github.com/python-poetry/poetry/issues/273#issuecomment-1103812336 poetry build --format wheel poetry export -f requirements.txt --output requirements.txt check if client requirementstxt output has changed need to add cs_tools to the client-install lockfile // hmm... https://python-poetry.org/docs/dependency-specification/#git-dependencies https://github.com/python-poetry/poetry/issues/558#issuecomment-481064864 https://github.com/python-poetry/poetry/issues/76#issuecomment-385439995 - poetry install --no-dev --no-root remote: https://github.com/python-poetry/poetry/blob/master/install-poetry.py | python - local: python install-poetry.py --path ... --path Install from a given path (file or directory) instead of fetching the latest version of Poetry available online. can vendor the latest releases: https://github.com/python-poetry/poetry/releases/tag/1.1.13","title":"Deploy a release"},{"location":"for-developers/build-cs-tools/#ci-cd","text":"https://github.com/python-poetry/poetry/blob/master/.github/workflows/main.yml","title":"CI / CD"},{"location":"for-developers/build-cs-tools/#plugins-eventually","text":"https://www.youtube.com/watch?v=fY3Y_xPKWNA","title":"Plugins eventually ?"},{"location":"for-developers/contributing/","text":"Thanks for your interest in cs_tools! \u00b6 Everyone Can Participate! We strongly believe everyone in PS/CS can participate, no matter what their technical proficiency is. If you don't know where to start, see the Github Issue Tracker filtered to Good First Issue . This project is maintained by the Professional Services and Customer Success organizations at ThoughtSpot. It is meant to help client manage and scale their ThoughtSpot platform. CS Tools offers this additional feature set primarily through a command line interface. Most tools have a python base, with an optional web-based application written primary in HTML and javascript. To contribute to the project, you'll want to setup your development environment . Installation \u00b6 cs_tools can be directly used from GitHub by cloning the repository into a directory on your machine 1 : git clone https://github.com/thoughtspot/cs_tools.git When cloning from git , you must install all required dependencies 2 yourself: pip install -r cs_tools/dev-requirements.txt A note on our Branch Strategy \u00b6 master is our release branch dev is our coordination branch All new features, hotfixes, and documentation updates require.. pulls and branch from dev work to be done within a feature branch pull requests with code-review If you're already lost by the install instructions, you might want to start by setting up your environment! \u21a9 It is highly recommended that you first set up a virtual environment . \u21a9","title":"Contributing"},{"location":"for-developers/contributing/#thanks-for-your-interest-in-cs_tools","text":"Everyone Can Participate! We strongly believe everyone in PS/CS can participate, no matter what their technical proficiency is. If you don't know where to start, see the Github Issue Tracker filtered to Good First Issue . This project is maintained by the Professional Services and Customer Success organizations at ThoughtSpot. It is meant to help client manage and scale their ThoughtSpot platform. CS Tools offers this additional feature set primarily through a command line interface. Most tools have a python base, with an optional web-based application written primary in HTML and javascript. To contribute to the project, you'll want to setup your development environment .","title":"&nbsp; Thanks for your interest in cs_tools!"},{"location":"for-developers/contributing/#installation","text":"cs_tools can be directly used from GitHub by cloning the repository into a directory on your machine 1 : git clone https://github.com/thoughtspot/cs_tools.git When cloning from git , you must install all required dependencies 2 yourself: pip install -r cs_tools/dev-requirements.txt","title":"Installation"},{"location":"for-developers/contributing/#a-note-on-our-branch-strategy","text":"master is our release branch dev is our coordination branch All new features, hotfixes, and documentation updates require.. pulls and branch from dev work to be done within a feature branch pull requests with code-review If you're already lost by the install instructions, you might want to start by setting up your environment! \u21a9 It is highly recommended that you first set up a virtual environment . \u21a9","title":"A note on our Branch Strategy"},{"location":"for-developers/environment-setup/","text":".md-typeset h1, .md-content__button { display: none; } Getting Started for Developers \u00b6 To work on cs_tools , you'll want to have git and python 3.6.8+ installed on your machine. Then you can clone the source from github, and be up and running in less than 5 minutes! Mac Linux Windows Cmd + Space , type terminal , Enter # change $HOME/cs_tools to where you want to save your local copy of the repository git clone https://github.com/thoughtspot/cs_tools.git $HOME /cs_tools python3 -m venv $HOME /.cs_tools-dev source $HOME /.cs_tools-dev/bin/activate.bat pip install -r dev-requirements.txt if in a GUI environment , Ctrl + Shift + T # change $HOME/cs_tools to where you want to save your local copy of the repository git clone https://github.com/thoughtspot/cs_tools.git $HOME /cs_tools python3 -m venv $HOME /.cs_tools-dev source $HOME /.cs_tools-dev/bin/activate.bat pip install -r dev-requirements.txt Win , type cmd , Enter # change %USERPROFILE%/cs_tools to where you want to save your local copy of the repository git clone https :// github . com / thoughtspot / cs_tools . git % USERPROFILE %/ cs_tools python -m venv % USERPROFILE %\\. cs_tools-dev % USERPROFILE %\\. cs_tools-dev \\ Scripts \\ activate . bat pip install -r dev-requirements . txt Virtual Environments \u00b6 While not strictly necessary, a virtual environment is an incredibly useful tool to use when writing and maintaining several python projects on a single machine. Each virtual environment has its own Python binary (which matches the version of the that was used to create that environment) and can have its own independent set of installed Python packages in its site directories. At its core, the main purpose of Python virtual environments is to create an isolated environment for Python projects. This means that each project can have its own dependencies, regardless of what dependencies every other project has. For full breakdown, see Real Python's tutorial on virtual environments.","title":"Environment setup"},{"location":"for-developers/environment-setup/#getting-started-for-developers","text":"To work on cs_tools , you'll want to have git and python 3.6.8+ installed on your machine. Then you can clone the source from github, and be up and running in less than 5 minutes! Mac Linux Windows Cmd + Space , type terminal , Enter # change $HOME/cs_tools to where you want to save your local copy of the repository git clone https://github.com/thoughtspot/cs_tools.git $HOME /cs_tools python3 -m venv $HOME /.cs_tools-dev source $HOME /.cs_tools-dev/bin/activate.bat pip install -r dev-requirements.txt if in a GUI environment , Ctrl + Shift + T # change $HOME/cs_tools to where you want to save your local copy of the repository git clone https://github.com/thoughtspot/cs_tools.git $HOME /cs_tools python3 -m venv $HOME /.cs_tools-dev source $HOME /.cs_tools-dev/bin/activate.bat pip install -r dev-requirements.txt Win , type cmd , Enter # change %USERPROFILE%/cs_tools to where you want to save your local copy of the repository git clone https :// github . com / thoughtspot / cs_tools . git % USERPROFILE %/ cs_tools python -m venv % USERPROFILE %\\. cs_tools-dev % USERPROFILE %\\. cs_tools-dev \\ Scripts \\ activate . bat pip install -r dev-requirements . txt","title":"Getting Started for Developers"},{"location":"for-developers/environment-setup/#virtual-environments","text":"While not strictly necessary, a virtual environment is an incredibly useful tool to use when writing and maintaining several python projects on a single machine. Each virtual environment has its own Python binary (which matches the version of the that was used to create that environment) and can have its own independent set of installed Python packages in its site directories. At its core, the main purpose of Python virtual environments is to create an isolated environment for Python projects. This means that each project can have its own dependencies, regardless of what dependencies every other project has. For full breakdown, see Real Python's tutorial on virtual environments.","title":"Virtual Environments"},{"location":"for-developers/what-is-markdown/","text":"/* This is a hack. Don't do this. TOC gets generated by H tags, so we gotta impersonate. */ .as-h1 { color: var(--md-default-fg-color--light); font-size: 2em; line-height: 1.3; margin: 0 0 1.25em; } .as-h2 { font-size: 1.5625em; line-height: 1.4; margin: 1.6em 0 .64em; } .as-h3 { font-size: 1.25em; font-weight: 400; letter-spacing: -.01em; line-height: 1.5; margin: 1.6em 0 .8em; } .as-h4 { font-weight: 700; letter-spacing: -.01em; margin: 1em 0; } .as-h5, .as-h6 { color: var(--md-default-fg-color--light); font-size: .8em; font-weight: 700; letter-spacing: -.01em; margin: 1.25em 0; } What is Markdown ? \u00b6 Markdown is a way to write content for the web. It's written in what people call \"plaintext\", which is exactly the sort of text you're used to writing and seeing. Plaintext is just the regular alphabet with a few familiar symbols, like asterisks ( * ) and backticks ( ` ). Unlike cumbersome word processing applications, text written in Markdown can be easily shared between computers, mobile phones, and people. Formatting text in Markdown has a very gentle learning curve. If you have ten minutes, you can learn Markdown! \u00b6 Tip In these lessons, you'll notice some formatted monospace text ; this text is actually written in Markdown! Regular Markdown doesn't look any different than regular text, but we're providing some highlighting to make it easier to see. Italics and Bold \u00b6 We'll start by learning two basic elements in text formatting: italics and bold . To make a phrase italic in Markdown, you can surround words with an asterisk ( * ). For example, *this* word would become italic . Similarly, to make phrases bold in Markdown, you can surround words with two underscores ( __ ). This will __really__ get your point across. Of course, you can use *both italics and bold* in the same line. You can also span them __across multiple words__ . In general, it doesn't matter which order you place the asterisks or underscores. To make the words \"This is unbelievable\" both bold and italic, like *__\"This is unbelievable\"__* . We'll place the asterisks *__on the outside__* , just to make it more legible. Headers \u00b6 Let's take a look at another formatting convention: the header. Headers are frequently used on websites, magazine articles, and notices, to draw attention to a section. As their name implies, they act like titles or subtitles above sections. There are six types of headers, in decreasing sizes: Example Level 1 Level 2 Level 3 Level 4 Level 5 Level 6 All Levels Example Code This is header one This is header two This is header three This is header four This is header five This is header six This is header one This is header two This is header three This is header four This is header five This is header six #This is header one ##This is header two ###This is header three ####This is header four #####This is header five ######This is header six To make headers in Markdown, you preface the phrase with a hash mark ( # ). You place the same number of hash marks as the size of the header you want. For example, for a header one, you'd use one hash mark ( # Header One ), while for a header three, you'd use three ( ### Header Three ). It's up to you to decide when it's appropriate to use which header. In general, headers one and six should be used sparingly. Links \u00b6 We'll now learn how to make links to other web sites on the world wide web. There are two different link types in Markdown, but both of them render the exact same way. The first link style is called an inline link . To create an inline link, you wrap the link text in brackets ( [ ] ), and then you wrap the link in parenthesis ( ( ) ). For example, to create a hyperlink to www.github.com, with a link text that says, Visit GitHub!, you'd write this in Markdown: [Visit GitHub!](https://www.github.com) . You can add emphasis to link texts, if you like. You'll want to make sure that the bold phrasing occurs within the link text brackets and although it might make for an awkward experience, you can make links within headings, too. That's really all there is to writing inline links. The other link type is called a reference link. As the name implies, the link is actually a reference to another place in the document. Here's an example of what we mean: Here's [ a link to something else ][ another place ]. Here's [ yet another link ][ another-link ]. And now back to [ the first link ][ another place ]. [ another place ]: www.github.com [ another-link ]: www.google.com The \"references\" above are the second set of brackets: [another place] and [another-link] . At the bottom of a Markdown document, these brackets are defined as proper links to outside websites. An advantage of the reference link style is that multiple links to the same place only need to be updated once. For example, if we decide to make all of the [another place] links go somewhere else, we only have to change the single reference link. Reference links don't appear in the rendered Markdown. You define them by providing the same tag name wrapped in brackets, followed by a colon, followed by the link. Images \u00b6 If you know how to create links in Markdown, you can create images, too. The syntax is nearly the same. Images also have two styles, just like links, and both of them render the exact same way. The difference between links and images is that images are prefaced with an exclamation point ( ! ). The first image style is called an inline image link . To create an inline image link, enter an exclamation point ( ! ), wrap the alt text in brackets ( [ ] ), and then wrap the link in parenthesis ( ( ) ). (Alt text is a phrase or sentence that describes the image for the visually impaired.) For example, to create an inline image link to https://octodex.github.com/images/bannekat.png, with an alt text that says, Benjamin Bannekat, you'd write this in Markdown: ![Benjamin Bannekat](https://octodex.github.com/images/bannekat.png) . Example Result Markdown ![ Benjamin Bannekat ]( https://octodex.github.com/images/bannekat.png ) Although you don't need to add alt text, it will make your content accessible to your audience, including people who are visually impaired, use screen readers, or do not have high speed internet connections. For a reference image, you'll follow the same pattern as a reference link. You'll precede the Markdown with an exclamation point, then provide two brackets for the alt text, and then two more for the image tag, like this: ![The founding father][Father] At the bottom of your Markdown page, you'll define an image for the tag, like this: [Father]: http://octodex.github.com/images/founding-father.jpg . Ta da! You've learned all there is to adding images in Markdown! Blockquotes \u00b6 If you need to call special attention to a quote from another source, or design a pull quote for a magazine article, then Markdown's blockquote syntax will be useful. A blockquote is a sentence or paragraph that's been specially formatted to draw attention to the reader. For example: \"The sin of doing nothing is the deadliest of all the seven sins. It has been said that for evil men to accomplish their purpose it is only necessary that good men should do nothing.\" To create a block quote, all you have to do is preface a line with the \"greater than\" caret ( > ). For example: > In a few moments he was barefoot, his stockings folded in his pockets and his canvas shoes dangling by their knotted laces over his shoulders and, picking a pointed salt-eaten stick out of the jetsam among the rocks, he clambered down the slope of the breakwater. You can also place a caret character on each line of the quote. This is particularly useful if your quote spans multiple paragraphs. For example: > His words seemed to have struck some deep chord in his own nature. Had he spoken of himself, of himself as he was or wished to be? Stephen watched his face for some moments in silence. A cold sadness was there. He had spoken of himself, of his own loneliness which he feared. > > \u2014Of whom are you speaking? Stephen asked at length. > > Cranly did not answer. Notice that even blank lines must contain the caret character. This ensures that the entire blockquote is grouped together. Block quotes can contain other Markdown elements, such as italics, images, or links. Example Result Markdown Programmers waste enormous amounts of time thinking about, or worrying about, the speed of noncritical parts of their programs, and these attempts at efficiency actually have a strong negative impact when debugging and maintenance are considered. We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil . Yet we should not pass up our opportunities in that critical 3%. - Donald Knuth > *Programmers waste enormous amounts of time thinking about, or worrying about, the speed of noncritical parts > of their programs, and these attempts at efficiency actually have a strong negative impact when debugging and > maintenance are considered. We should forget about small efficiencies, say about 97% of the time: __premature > optimization is the root of all evil__. Yet we should not pass up our opportunities in that critical 3%.* > #### - Donald Knuth Ta da! You've learned all there is to creating blockquotes in Markdown! Lists \u00b6 There are two types of lists in the known universe: unordered and ordered. That's a fancy way of saying that there are lists with bullet points, and lists with numbers. To create an unordered list, you'll want to preface each item in the list with an asterisk ( * ). Each list item also gets its own line. For example, a grocery list in Markdown might look like this: * Milk * Eggs * Salmon * Butter This Markdown list would render into the following bullet points: Milk Eggs Salmon Butter Now, let's talk about ordered ones. An ordered list is prefaced with numbers, instead of asterisks. Take a look at this recipe: Crack three eggs over a bowl Pour a gallon of milk into the bowl Rub the salmon vigorously with butter Drop the salmon into the egg-milk bowl To write that in Markdown, you'd do this: 1. Crack three eggs over a bowl 2. Pour a gallon of milk into the bowl 3. Rub the salmon vigorously with butter 4. Drop the salmon into the egg-milk bowl Easy, right? It's just like you'd expect a list to look. You can choose to add italics, bold, or links within lists, as you might expect. Azalea ( Ericaceae Rhododendron ) Chrysanthemum ( Anthemideae Chrysanthemum ) Dahlia ( Coreopsideae Dahlia ) Occasionally, you might find the need to make a list with more depth, or, to nest one list within another. Have no fear, because the Markdown syntax is exactly the same. All you have to do is to remember to indent each asterisk one space more than the preceding item. For example, in the following list, we're going to add some sub-lists to each \"main\" list item, describing the people in detail: * Tintin * A reporter * Has poofy orange hair * Friends with the world's most awesome dog * Haddock * A sea captain * Has a fantastic beard * Loves whiskey * Possibly also scotch? When rendered, this list turns into the following grouping: Tintin A reporter Has poofy orange hair Friends with the world's most awesome dog Haddock A sea captain Has a fantastic beard Loves whiskey Possibly also scotch? While you could continue to indent and add sub-lists indefinitely, it's usually a good idea to stop after three levels; otherwise, your text becomes a mess. There's one more trick to lists and indentation that we'll explore, and that deals with the case of paragraphs. Suppose you want to create a bullet list that requires some additional context (but not another list). For example, it might look like this: Crack three eggs over a bowl. Now, you're going to want to crack the eggs in such a way that you don't make a mess. If you do make a mess, use a towel to clean it up! Pour a gallon of milk into the bowl. Basically, take the same guidance as above: don't be messy, but if you are, clean it up! Rub the salmon vigorously with butter. By \"vigorous,\" we mean a strictly vertical motion. Julia Child once quipped: Up and down and all around, that's how butter on salmon goes. Drop the salmon into the egg-milk bowl. Here are some techniques on salmon-dropping: Make sure no trout or children are present Use both hands Always have a towel nearby in case of messes To create this sort of text, your paragraph must start on a line all by itself underneath the bullet point, and it must be indented by at least one space. For example, the list above looks like this in Markdown: 1. Crack three eggs over a bowl. Now, you're going to want to crack the eggs in such a way that you don't make a mess. If you _do_ make a mess, use a towel to clean it up! 2. Pour a gallon of milk into the bowl. Basically, take the same guidance as above: don't be messy, but if you are, clean it up! 3. Rub the salmon vigorously with butter. By \"vigorous,\" we mean a strictly vertical motion. Julia Child once quipped: > Up and down and all around, that's how butter on salmon goes. 4. Drop the salmon into the egg-milk bowl. Here are some techniques on salmon-dropping: * Make sure no trout or children are present * Use both hands * Always have a towel nearby in case of messes Notice that the first two items have a single space. This looks a bit odd, so you might want to indent properly to match the characters up (like items three and four). In these paragraphs, you can include all sorts of other Markdown elements, like blockquotes, or even other lists! You now know how to make lists in Markdown! Paragraphs \u00b6 Markdown has several ways of formatting paragraphs. Let's take a few lines of poetry as an example. Suppose you want to write text that looks like this: Do I contradict myself? Very well then I contradict myself, (I am large, I contain multitudes.) Now, you might think that simply typing each verse onto its own line would be enough to solve the problem: Do I contradict myself? Very well then I contradict myself, (I am large, I contain multitudes.) Unfortunately, you'd be wrong! This Markdown would render simply as a single straight line: Do I contradict myself? Very well then I contradict myself, (I am large, I contain multitudes.). If you forcefully insert a new line, you end up breaking the togetherness: Do I contradict myself? Very well then I contradict myself, (I am large, I contain multitudes.) This is what's known as a hard break ; what our poetry asks for is a soft break . You can accomplish this by inserting two spaces after each new line. This is not possible to see, since spaces are invisible, but it'd look something like this: Do I contradict myself?\u00b7\u00b7 Very well then I contradict myself,\u00b7\u00b7 (I am large, I contain multitudes.) Each dot ( \u00b7 ) represents a space on the keyboard. Aside from formatting poetry, one of the common uses for these soft breaks is in formatting paragraphs in lists. Recall in the previous lesson that we inserted a new line for multiple paragraphs within a list. Et voila! You now know how to make soft breaks in Markdown! Optional Extras \u00b6 You've completed all the lessons! Believe it or not, we've only just begun exploring what can be accomplished with Markdown. There are many \"extended\" implementations of Markdown that support formats like tables, definition lists, footnotes, and more. Because they're non-standard, they're not essential to learning the basics, as we've introduced here. See below for even more Markdown-based extensions Material for MkDocs Markdown Reference Technical documentation that just works. Create a branded static site from a set of Markdown files to host the documentation of your project. We use Material for MkDocs here in the cs_tools project. This allows us to do cool things like the admonishment callouts, footnotes, and content tabs - all in a markdown-esque format.","title":"What is Markdown?"},{"location":"for-developers/what-is-markdown/#what-is-markdown","text":"Markdown is a way to write content for the web. It's written in what people call \"plaintext\", which is exactly the sort of text you're used to writing and seeing. Plaintext is just the regular alphabet with a few familiar symbols, like asterisks ( * ) and backticks ( ` ). Unlike cumbersome word processing applications, text written in Markdown can be easily shared between computers, mobile phones, and people. Formatting text in Markdown has a very gentle learning curve.","title":"What is Markdown?"},{"location":"for-developers/what-is-markdown/#learn-markdown","text":"Tip In these lessons, you'll notice some formatted monospace text ; this text is actually written in Markdown! Regular Markdown doesn't look any different than regular text, but we're providing some highlighting to make it easier to see.","title":"Learn Markdown!"},{"location":"for-developers/what-is-markdown/#italics-and-bold","text":"We'll start by learning two basic elements in text formatting: italics and bold . To make a phrase italic in Markdown, you can surround words with an asterisk ( * ). For example, *this* word would become italic . Similarly, to make phrases bold in Markdown, you can surround words with two underscores ( __ ). This will __really__ get your point across. Of course, you can use *both italics and bold* in the same line. You can also span them __across multiple words__ . In general, it doesn't matter which order you place the asterisks or underscores. To make the words \"This is unbelievable\" both bold and italic, like *__\"This is unbelievable\"__* . We'll place the asterisks *__on the outside__* , just to make it more legible.","title":"Italics and Bold"},{"location":"for-developers/what-is-markdown/#headers","text":"Let's take a look at another formatting convention: the header. Headers are frequently used on websites, magazine articles, and notices, to draw attention to a section. As their name implies, they act like titles or subtitles above sections. There are six types of headers, in decreasing sizes: Example Level 1 Level 2 Level 3 Level 4 Level 5 Level 6 All Levels Example Code This is header one This is header two This is header three This is header four This is header five This is header six This is header one This is header two This is header three This is header four This is header five This is header six #This is header one ##This is header two ###This is header three ####This is header four #####This is header five ######This is header six To make headers in Markdown, you preface the phrase with a hash mark ( # ). You place the same number of hash marks as the size of the header you want. For example, for a header one, you'd use one hash mark ( # Header One ), while for a header three, you'd use three ( ### Header Three ). It's up to you to decide when it's appropriate to use which header. In general, headers one and six should be used sparingly.","title":"Headers"},{"location":"for-developers/what-is-markdown/#links","text":"We'll now learn how to make links to other web sites on the world wide web. There are two different link types in Markdown, but both of them render the exact same way. The first link style is called an inline link . To create an inline link, you wrap the link text in brackets ( [ ] ), and then you wrap the link in parenthesis ( ( ) ). For example, to create a hyperlink to www.github.com, with a link text that says, Visit GitHub!, you'd write this in Markdown: [Visit GitHub!](https://www.github.com) . You can add emphasis to link texts, if you like. You'll want to make sure that the bold phrasing occurs within the link text brackets and although it might make for an awkward experience, you can make links within headings, too. That's really all there is to writing inline links. The other link type is called a reference link. As the name implies, the link is actually a reference to another place in the document. Here's an example of what we mean: Here's [ a link to something else ][ another place ]. Here's [ yet another link ][ another-link ]. And now back to [ the first link ][ another place ]. [ another place ]: www.github.com [ another-link ]: www.google.com The \"references\" above are the second set of brackets: [another place] and [another-link] . At the bottom of a Markdown document, these brackets are defined as proper links to outside websites. An advantage of the reference link style is that multiple links to the same place only need to be updated once. For example, if we decide to make all of the [another place] links go somewhere else, we only have to change the single reference link. Reference links don't appear in the rendered Markdown. You define them by providing the same tag name wrapped in brackets, followed by a colon, followed by the link.","title":"Links"},{"location":"for-developers/what-is-markdown/#images","text":"If you know how to create links in Markdown, you can create images, too. The syntax is nearly the same. Images also have two styles, just like links, and both of them render the exact same way. The difference between links and images is that images are prefaced with an exclamation point ( ! ). The first image style is called an inline image link . To create an inline image link, enter an exclamation point ( ! ), wrap the alt text in brackets ( [ ] ), and then wrap the link in parenthesis ( ( ) ). (Alt text is a phrase or sentence that describes the image for the visually impaired.) For example, to create an inline image link to https://octodex.github.com/images/bannekat.png, with an alt text that says, Benjamin Bannekat, you'd write this in Markdown: ![Benjamin Bannekat](https://octodex.github.com/images/bannekat.png) . Example Result Markdown ![ Benjamin Bannekat ]( https://octodex.github.com/images/bannekat.png ) Although you don't need to add alt text, it will make your content accessible to your audience, including people who are visually impaired, use screen readers, or do not have high speed internet connections. For a reference image, you'll follow the same pattern as a reference link. You'll precede the Markdown with an exclamation point, then provide two brackets for the alt text, and then two more for the image tag, like this: ![The founding father][Father] At the bottom of your Markdown page, you'll define an image for the tag, like this: [Father]: http://octodex.github.com/images/founding-father.jpg . Ta da! You've learned all there is to adding images in Markdown!","title":"Images"},{"location":"for-developers/what-is-markdown/#blockquotes","text":"If you need to call special attention to a quote from another source, or design a pull quote for a magazine article, then Markdown's blockquote syntax will be useful. A blockquote is a sentence or paragraph that's been specially formatted to draw attention to the reader. For example: \"The sin of doing nothing is the deadliest of all the seven sins. It has been said that for evil men to accomplish their purpose it is only necessary that good men should do nothing.\" To create a block quote, all you have to do is preface a line with the \"greater than\" caret ( > ). For example: > In a few moments he was barefoot, his stockings folded in his pockets and his canvas shoes dangling by their knotted laces over his shoulders and, picking a pointed salt-eaten stick out of the jetsam among the rocks, he clambered down the slope of the breakwater. You can also place a caret character on each line of the quote. This is particularly useful if your quote spans multiple paragraphs. For example: > His words seemed to have struck some deep chord in his own nature. Had he spoken of himself, of himself as he was or wished to be? Stephen watched his face for some moments in silence. A cold sadness was there. He had spoken of himself, of his own loneliness which he feared. > > \u2014Of whom are you speaking? Stephen asked at length. > > Cranly did not answer. Notice that even blank lines must contain the caret character. This ensures that the entire blockquote is grouped together. Block quotes can contain other Markdown elements, such as italics, images, or links. Example Result Markdown Programmers waste enormous amounts of time thinking about, or worrying about, the speed of noncritical parts of their programs, and these attempts at efficiency actually have a strong negative impact when debugging and maintenance are considered. We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil . Yet we should not pass up our opportunities in that critical 3%. - Donald Knuth > *Programmers waste enormous amounts of time thinking about, or worrying about, the speed of noncritical parts > of their programs, and these attempts at efficiency actually have a strong negative impact when debugging and > maintenance are considered. We should forget about small efficiencies, say about 97% of the time: __premature > optimization is the root of all evil__. Yet we should not pass up our opportunities in that critical 3%.* > #### - Donald Knuth Ta da! You've learned all there is to creating blockquotes in Markdown!","title":"Blockquotes"},{"location":"for-developers/what-is-markdown/#lists","text":"There are two types of lists in the known universe: unordered and ordered. That's a fancy way of saying that there are lists with bullet points, and lists with numbers. To create an unordered list, you'll want to preface each item in the list with an asterisk ( * ). Each list item also gets its own line. For example, a grocery list in Markdown might look like this: * Milk * Eggs * Salmon * Butter This Markdown list would render into the following bullet points: Milk Eggs Salmon Butter Now, let's talk about ordered ones. An ordered list is prefaced with numbers, instead of asterisks. Take a look at this recipe: Crack three eggs over a bowl Pour a gallon of milk into the bowl Rub the salmon vigorously with butter Drop the salmon into the egg-milk bowl To write that in Markdown, you'd do this: 1. Crack three eggs over a bowl 2. Pour a gallon of milk into the bowl 3. Rub the salmon vigorously with butter 4. Drop the salmon into the egg-milk bowl Easy, right? It's just like you'd expect a list to look. You can choose to add italics, bold, or links within lists, as you might expect. Azalea ( Ericaceae Rhododendron ) Chrysanthemum ( Anthemideae Chrysanthemum ) Dahlia ( Coreopsideae Dahlia ) Occasionally, you might find the need to make a list with more depth, or, to nest one list within another. Have no fear, because the Markdown syntax is exactly the same. All you have to do is to remember to indent each asterisk one space more than the preceding item. For example, in the following list, we're going to add some sub-lists to each \"main\" list item, describing the people in detail: * Tintin * A reporter * Has poofy orange hair * Friends with the world's most awesome dog * Haddock * A sea captain * Has a fantastic beard * Loves whiskey * Possibly also scotch? When rendered, this list turns into the following grouping: Tintin A reporter Has poofy orange hair Friends with the world's most awesome dog Haddock A sea captain Has a fantastic beard Loves whiskey Possibly also scotch? While you could continue to indent and add sub-lists indefinitely, it's usually a good idea to stop after three levels; otherwise, your text becomes a mess. There's one more trick to lists and indentation that we'll explore, and that deals with the case of paragraphs. Suppose you want to create a bullet list that requires some additional context (but not another list). For example, it might look like this: Crack three eggs over a bowl. Now, you're going to want to crack the eggs in such a way that you don't make a mess. If you do make a mess, use a towel to clean it up! Pour a gallon of milk into the bowl. Basically, take the same guidance as above: don't be messy, but if you are, clean it up! Rub the salmon vigorously with butter. By \"vigorous,\" we mean a strictly vertical motion. Julia Child once quipped: Up and down and all around, that's how butter on salmon goes. Drop the salmon into the egg-milk bowl. Here are some techniques on salmon-dropping: Make sure no trout or children are present Use both hands Always have a towel nearby in case of messes To create this sort of text, your paragraph must start on a line all by itself underneath the bullet point, and it must be indented by at least one space. For example, the list above looks like this in Markdown: 1. Crack three eggs over a bowl. Now, you're going to want to crack the eggs in such a way that you don't make a mess. If you _do_ make a mess, use a towel to clean it up! 2. Pour a gallon of milk into the bowl. Basically, take the same guidance as above: don't be messy, but if you are, clean it up! 3. Rub the salmon vigorously with butter. By \"vigorous,\" we mean a strictly vertical motion. Julia Child once quipped: > Up and down and all around, that's how butter on salmon goes. 4. Drop the salmon into the egg-milk bowl. Here are some techniques on salmon-dropping: * Make sure no trout or children are present * Use both hands * Always have a towel nearby in case of messes Notice that the first two items have a single space. This looks a bit odd, so you might want to indent properly to match the characters up (like items three and four). In these paragraphs, you can include all sorts of other Markdown elements, like blockquotes, or even other lists! You now know how to make lists in Markdown!","title":"Lists"},{"location":"for-developers/what-is-markdown/#paragraphs","text":"Markdown has several ways of formatting paragraphs. Let's take a few lines of poetry as an example. Suppose you want to write text that looks like this: Do I contradict myself? Very well then I contradict myself, (I am large, I contain multitudes.) Now, you might think that simply typing each verse onto its own line would be enough to solve the problem: Do I contradict myself? Very well then I contradict myself, (I am large, I contain multitudes.) Unfortunately, you'd be wrong! This Markdown would render simply as a single straight line: Do I contradict myself? Very well then I contradict myself, (I am large, I contain multitudes.). If you forcefully insert a new line, you end up breaking the togetherness: Do I contradict myself? Very well then I contradict myself, (I am large, I contain multitudes.) This is what's known as a hard break ; what our poetry asks for is a soft break . You can accomplish this by inserting two spaces after each new line. This is not possible to see, since spaces are invisible, but it'd look something like this: Do I contradict myself?\u00b7\u00b7 Very well then I contradict myself,\u00b7\u00b7 (I am large, I contain multitudes.) Each dot ( \u00b7 ) represents a space on the keyboard. Aside from formatting poetry, one of the common uses for these soft breaks is in formatting paragraphs in lists. Recall in the previous lesson that we inserted a new line for multiple paragraphs within a list. Et voila! You now know how to make soft breaks in Markdown!","title":"Paragraphs"},{"location":"for-developers/what-is-markdown/#optional-extras","text":"You've completed all the lessons! Believe it or not, we've only just begun exploring what can be accomplished with Markdown. There are many \"extended\" implementations of Markdown that support formats like tables, definition lists, footnotes, and more. Because they're non-standard, they're not essential to learning the basics, as we've introduced here. See below for even more Markdown-based extensions Material for MkDocs Markdown Reference Technical documentation that just works. Create a branded static site from a set of Markdown files to host the documentation of your project. We use Material for MkDocs here in the cs_tools project. This allows us to do cool things like the admonishment callouts, footnotes, and content tabs - all in a markdown-esque format.","title":"Optional Extras"},{"location":"for-developers/writing-documentation/","text":"MkDocs has been chosen to be our static site generator, as Markdown is an easily approachable format. This is easily extensible and has many plugins already. Material for MkDocs Markdown Reference Technical documentation that just works. Create a branded static site from a set of Markdown files to host the documentation of your project. We use Material for MkDocs here in the cs_tools project. This allows us to do cool things like the admonishment callouts, footnotes, and content tabs - all in a markdown-esque format.","title":"Writing documentation"},{"location":"for-developers/your-first-tool/","text":"","title":"Your first tool"},{"location":"syncer/bigquery/","text":"In Beta The Syncer protocol is in beta, it has been added to CS Tools in v1.3 on a provisional basis . It may change significantly in future releases and its interface will not be concrete until v2. Feedback from the community while it's still provisional would be extremely useful; either comment on #25 or create a new issue. BigQuery is a serverless, cost-effective and multicloud data warehouse designed to help you turn big data into valuable business insights. It a fully-managed, serverless data warehouse that enables scalable analysis over petabytes of data. In order to use the BigQuery syncer , you must first configure your local environment. The setup instructions below will help you create a Google Cloud Project and enable the BigQuery Storage API to allow CS Tools to interact with your BigQuery environment. Setup instructions Head to Google Developers Console and create a new project (or select the one you already have). Go to APIs & Services > Enable APIs & services. Click the button for + ENABLE APIS AND SERVICES In the Search bar, find BigQuery API . Click ENABLE . Create a Service Account . Create a service account key. In the Cloud Console, click the email address for the service account that you created. Click Keys . Click Add key , then click Create new key . Click Create . A JSON key file is downloaded to your computer. Click Close . [optional] , Move the downloaded file to ~/.config/cs_tools/bigquery/credentials.json . Move the downloaded file to %APPDATA%\\cs_tools\\bigquery\\credentials.json . Want to see the source code? If you're writing a Custom Syncer, you can check our project code for an example. cs_tools/sync/ bigquery /syncer.py BigQuery DEFINITION.toml spec \u00b6 project_id : id of your google cloud project dataset : name of your bigquery dataset credentials_file : optional , absolute path to your credentials JSON file default : <cs_tools-app-directory>/bigquery/credentials.json you can find the cs_tools app directory by running cs_tools config show truncate_on_load : optional , either true or false , remove all data in the table prior to a new data load default : true How do I use the BigQuery syncer in commands? Mac, Linux Windows cs_tools tools searchable bi-server bigquery:///home/user/syncers/bigquery-definition.toml --compact cs_tools tools searchable bi-server bigquery://default --compact cs_tools tools searchable bi-server bigquery://C:\\Users\\%USERNAME%\\Downloads\\bigquery-definition.toml --compact cs_tools tools searchable bi-server bigquery://default --compact Learn how to register a default for syncers in How-to: Setup a Configuration File . Full Definition Example \u00b6 definition.toml [configuration] project_id = 'cs_tools' dataset = 'thoughtspot' credentials_file = 'C:\\Users\\NameyNamerson\\Downloads\\syncers\\<project-name>.json' truncate_on_load = true","title":"Google BigQuery"},{"location":"syncer/bigquery/#bigquery-definitiontoml-spec","text":"project_id : id of your google cloud project dataset : name of your bigquery dataset credentials_file : optional , absolute path to your credentials JSON file default : <cs_tools-app-directory>/bigquery/credentials.json you can find the cs_tools app directory by running cs_tools config show truncate_on_load : optional , either true or false , remove all data in the table prior to a new data load default : true How do I use the BigQuery syncer in commands? Mac, Linux Windows cs_tools tools searchable bi-server bigquery:///home/user/syncers/bigquery-definition.toml --compact cs_tools tools searchable bi-server bigquery://default --compact cs_tools tools searchable bi-server bigquery://C:\\Users\\%USERNAME%\\Downloads\\bigquery-definition.toml --compact cs_tools tools searchable bi-server bigquery://default --compact Learn how to register a default for syncers in How-to: Setup a Configuration File .","title":"BigQuery DEFINITION.toml spec"},{"location":"syncer/bigquery/#full-definition-example","text":"definition.toml [configuration] project_id = 'cs_tools' dataset = 'thoughtspot' credentials_file = 'C:\\Users\\NameyNamerson\\Downloads\\syncers\\<project-name>.json' truncate_on_load = true","title":"Full Definition Example"},{"location":"syncer/csv/","text":"In Beta The Syncer protocol is in beta, it has been added to CS Tools in v1.3 on a provisional basis . It may change significantly in future releases and its interface will not be concrete until v2. Feedback from the community while it's still provisional would be extremely useful; either comment on #25 or create a new issue. A comma-separated values (CSV) file is a delimited text file that uses a comma to separate values. Each line of the file is a data record. Each record consists of one or more fields, separated by commas. A CSV file typically stores tabular data in plain text, in which case each line will have the same number of fields. Alternative delimiter-separated files are often given a \".csv\" extension despite the use of a non-comma field separator. Want to see the source code? If you're writing a Custom Syncer, you can check our project code for an example. cs_tools/sync/ csv /syncer.py CSV DEFINITION.toml spec \u00b6 directory : file location to write CSV data to delimiter : optional , one-character string used to separate fields default : | the pipe character will be used escape_character : optional , one-character string used to escape the delimiter default : no escaping happens zipped : optional , whether or not to zip the directory after writing all files default : false How do I use the CSV syncer in commands? Mac, Linux Windows cs_tools tools searchable bi-server csv:///home/user/syncers/csv-definition.toml --compact cs_tools tools searchable bi-server csv://default --compact cs_tools tools searchable bi-server csv://C:\\Users\\%USERNAME%\\Downloads\\csv-definition.toml --compact cs_tools tools searchable bi-server csv://default --compact Learn how to register a default for syncers in How-to: Setup a Configuration File . Full Definition Example \u00b6 definition.toml [configuration] directory = 'C:\\Users\\NameyNamerson\\Downloads\\thoughtspot' delimiter = '|' escape_character = '\\' zipped = true","title":"CSV"},{"location":"syncer/csv/#csv-definitiontoml-spec","text":"directory : file location to write CSV data to delimiter : optional , one-character string used to separate fields default : | the pipe character will be used escape_character : optional , one-character string used to escape the delimiter default : no escaping happens zipped : optional , whether or not to zip the directory after writing all files default : false How do I use the CSV syncer in commands? Mac, Linux Windows cs_tools tools searchable bi-server csv:///home/user/syncers/csv-definition.toml --compact cs_tools tools searchable bi-server csv://default --compact cs_tools tools searchable bi-server csv://C:\\Users\\%USERNAME%\\Downloads\\csv-definition.toml --compact cs_tools tools searchable bi-server csv://default --compact Learn how to register a default for syncers in How-to: Setup a Configuration File .","title":"CSV DEFINITION.toml spec"},{"location":"syncer/csv/#full-definition-example","text":"definition.toml [configuration] directory = 'C:\\Users\\NameyNamerson\\Downloads\\thoughtspot' delimiter = '|' escape_character = '\\' zipped = true","title":"Full Definition Example"},{"location":"syncer/excel/","text":"Lorem Ipsum..","title":"Excel"},{"location":"syncer/falcon/","text":"In Beta The Syncer protocol is in beta, it has been added to CS Tools in v1.3 on a provisional basis . It may change significantly in future releases and its interface will not be concrete until v2. Feedback from the community while it's still provisional would be extremely useful; either comment on #25 or create a new issue. Falcon is ThoughtSpot 's proprietary in-memory database that exists as part of your cluster. Its speed allowed our users to be able to analyze along any dimension without there being any time penalty, giving them a free reign to do any kind of analysis. This data store has been the backbone of many of our long-term customers. This database is only available for data insertion if you operate on the Software version of the product , and are not using Embrace Connections to a cloud-native data store. Want to see the source code? If you're writing a Custom Syncer, you can check our project code for an example. cs_tools/sync/ Falcon /syncer.py Falcon DEFINITION.toml spec \u00b6 database : name of the database to store data within database will be created if it does not exist schema : optional , name of the schema to store data within default : falcon_default_schema schema will be created if it does not exist empty_target : optional , either true or false default : true a TRUNCATE statement will be issued prior to loading any data loads if true is used timeout : optional , number of seconds to wait for individual commands to Falcon default : 60.0 if the timeout value is set to 0 then calls over to Falcon will never reach a timeout threshold ignore_load_balancer_redirect : optional default : false it's unlikely you need to change this, consult with your ThoughtSpot Customer Success Manager if you think it's necessary How do I use the Falcon syncer in commands? Mac, Linux Windows cs_tools tools searchable bi-server falcon:///home/user/syncers/falcon-definition.toml --compact cs_tools tools searchable bi-server falcon://default --compact cs_tools tools searchable bi-server falcon://C:\\Users\\%USERNAME%\\Downloads\\falcon-definition.toml --compact cs_tools tools searchable bi-server falcon://default --compact Learn how to register a default for syncers in How-to: Setup a Configuration File . Full Definition Example \u00b6 definition.toml [configuration] database = 'cs_tools' schema = 'falcon_default_schema' empty_target = true timeout = 5.0","title":"ThoughtSpot Falcon"},{"location":"syncer/falcon/#falcon-definitiontoml-spec","text":"database : name of the database to store data within database will be created if it does not exist schema : optional , name of the schema to store data within default : falcon_default_schema schema will be created if it does not exist empty_target : optional , either true or false default : true a TRUNCATE statement will be issued prior to loading any data loads if true is used timeout : optional , number of seconds to wait for individual commands to Falcon default : 60.0 if the timeout value is set to 0 then calls over to Falcon will never reach a timeout threshold ignore_load_balancer_redirect : optional default : false it's unlikely you need to change this, consult with your ThoughtSpot Customer Success Manager if you think it's necessary How do I use the Falcon syncer in commands? Mac, Linux Windows cs_tools tools searchable bi-server falcon:///home/user/syncers/falcon-definition.toml --compact cs_tools tools searchable bi-server falcon://default --compact cs_tools tools searchable bi-server falcon://C:\\Users\\%USERNAME%\\Downloads\\falcon-definition.toml --compact cs_tools tools searchable bi-server falcon://default --compact Learn how to register a default for syncers in How-to: Setup a Configuration File .","title":"Falcon DEFINITION.toml spec"},{"location":"syncer/falcon/#full-definition-example","text":"definition.toml [configuration] database = 'cs_tools' schema = 'falcon_default_schema' empty_target = true timeout = 5.0","title":"Full Definition Example"},{"location":"syncer/gsheets/","text":"In Beta The Syncer protocol is in beta, it has been added to CS Tools in v1.3 on a provisional basis . It may change significantly in future releases and its interface will not be concrete until v2. Feedback from the community while it's still provisional would be extremely useful; either comment on #25 or create a new issue. With Google Sheets, you can create and edit spreadsheets directly in your web browser - no special software is required. Multiple people can work simultaneously, you can see people\u2019s changes as they make them, and every change is saved automatically. In order to use the Google Sheets syncer , you must first configure your local environment. The setup instructions below will help you create a Google Cloud Project and utilize the OAuth Client ID workflow to allow CS Tools to selectively interact with your Google Sheet. Setup instructions Head to Google Developers Console and create a new project (or select the one you already have). In the box labeled Search for APIs and Services , search for Google Drive API and enable it. In the box labeled Search for APIs and Services , search for Google Sheets API and enable it. Go to APIs & Services > OAuth Consent Screen. Click the button for Configure Consent Screen In the 1 OAuth consent screen tab, give your app a name and fill the User support email and Developer contact information . Click SAVE AND CONTINUE . There is no need to fill in anything in the tab 2 Scopes , just click SAVE AND CONTINUE . In the tab 3 Test users , add the Google account email of the end user, typically your own Google email. Click SAVE AND CONTINUE . Double check the 4 Summary presented and click BACK TO DASHBOARD . Go to APIs & Services > Credentials Click + Create credentials at the top, then select OAuth client ID . Select Desktop app , name the credentials and click Create . Click Ok in the OAuth client created popup. Download the credentials by clicking the Download JSON button in OAuth 2.0 Client IDs section. [optional] , Move the downloaded file to ~/.config/cs_tools/gsheets/credentials.json . Move the downloaded file to %APPDATA%\\cs_tools\\gsheets\\credentials.json . Want to see the source code? If you're writing a Custom Syncer, you can check our project code for an example. cs_tools/sync/ gsheets /syncer.py Google Sheets DEFINITION.toml spec \u00b6 spreadsheet : name of the google sheet to interact with mode : optional , either append or overwrite default : overwrite credentials_file : optional , absolute path to your credentials JSON file default : cs_tools-app-directory/gsheets/credentials.json you can find the cs_tools app directory by running cs_tools config show How do I use the Google Sheets syncer in commands? Mac, Linux Windows cs_tools tools searchable bi-server gsheets:///home/user/syncers/google-sheets-definition.toml --compact cs_tools tools searchable bi-server gsheets://default --compact cs_tools tools searchable bi-server gsheets://C:\\Users\\%USERNAME%\\Downloads\\google-sheets-definition.toml --compact cs_tools tools searchable bi-server gsheets://default --compact Learn how to register a default for syncers in How-to: Setup a Configuration File . Full Definition Example \u00b6 definition.toml [configuration] spreadsheet = 'ThoughtSpot Data Sink' mode = 'overwrite' credentials_file = 'C:\\Users\\NameyNamerson\\Downloads\\syncers\\<project-name>.json'","title":"Google Sheets"},{"location":"syncer/gsheets/#google-sheets-definitiontoml-spec","text":"spreadsheet : name of the google sheet to interact with mode : optional , either append or overwrite default : overwrite credentials_file : optional , absolute path to your credentials JSON file default : cs_tools-app-directory/gsheets/credentials.json you can find the cs_tools app directory by running cs_tools config show How do I use the Google Sheets syncer in commands? Mac, Linux Windows cs_tools tools searchable bi-server gsheets:///home/user/syncers/google-sheets-definition.toml --compact cs_tools tools searchable bi-server gsheets://default --compact cs_tools tools searchable bi-server gsheets://C:\\Users\\%USERNAME%\\Downloads\\google-sheets-definition.toml --compact cs_tools tools searchable bi-server gsheets://default --compact Learn how to register a default for syncers in How-to: Setup a Configuration File .","title":"Google Sheets DEFINITION.toml spec"},{"location":"syncer/gsheets/#full-definition-example","text":"definition.toml [configuration] spreadsheet = 'ThoughtSpot Data Sink' mode = 'overwrite' credentials_file = 'C:\\Users\\NameyNamerson\\Downloads\\syncers\\<project-name>.json'","title":"Full Definition Example"},{"location":"syncer/json/","text":"Lorem Ipsum..","title":"Json"},{"location":"syncer/protocol/","text":"In Beta The Syncer protocol is in beta, it has been added to CS Tools in v1.3 on a provisional basis . It may change significantly in future releases and its interface will not be concrete until v2. Feedback from the community while it's still provisional would be extremely useful; either comment on #25 or create a new issue. If your use case for interacting with the ThoughtSpot API data isn't supported by the built-in syncers in CS Tools , we've exposed an interface for defining a custom syncer so that you can inject your own. To follow the Syncer protocol, you must provide at least.. A class in syncer.py which has at least 3 members: .name , .load() , .dump() MANIFEST.json which tells CS Tools how to register your custom syncer ..while a typical project directory follows the below format. <custom-syncer> \u251c\u2500 __init__.py \u251c\u2500 ... \u251c\u2500 syncer.py \u2514\u2500 MANIFEST.json Outside of these two file requirements, you are free to augment the interface in any way you want! Custom Syncers are pure python packages, so you're able to leverage the full python ecosystem. Tip You do not need to import SyncerProtocol in order to implement a custom one! Simply follow the 3 core requirements of defining a .name attribute, as well as .load() and .dump() members. syncer.py \u00b6 from dataclasses import dataclass from typing import Any , Dict , List # also available from pydantic.dataclasses import dataclass RECORDS_FORMAT = List [ Dict [ str , Any ]] @dataclass class SyncerProtocol : \"\"\" Implements a way to load and dump data to a data source. \"\"\" name : str def load ( self , identifier : str ) -> RECORDS_FORMAT : \"\"\" Extract data from the data storage layer. Parameters ---------- identifier: str resource name within the storage layer to extract data from \"\"\" def dump ( self , identifier : str , * , data : RECORDS_FORMAT ) -> None : \"\"\" Persist data to the data storage layer. Parameters ---------- identifier: str resource name within the storage layer to extract data from data: list-like of dictionaries data to persist \"\"\" Implementing a Database Syncer? Database Syncers have special meaning in CS Tools. They interact with complex data stores, typically at a remote location. Set an attribute on your syncer class named __is_database__ to any truthy value. This will tell CS Tools to run metadata.create_all(syncer.cnxn) prior to any calls to your syncer. Additonally, your syncer should expose an cnxn attribute, with a fully instantiated sqlalchemy.engine.Engine to interact with the database backend. \ud83d\udd25 Pro tip : during initialization, register a sqlalchemy event listener to capture the metadata during table creation. from dataclasses import dataclass import sqlalchemy as sa @dataclass class FooSyncer : __is_database__ = True name = 'foo_syncer' def __post_init__ ( self ): self . engine = sa . create_engine ( ... ) self . cnxn = self . engine . connect () sa . event . listen ( sa . schema . MetaData , 'after_create' , self . capture_metadata ) def capture_metadata ( self , metadata , cnxn , ** kw ): self . metadata = metadata Data is expressed to and from the syncer in standardized JSON format. The data should behave like a list of flat dictionaries. This format is most similar to how you would receive data back from many REST and DB-APIs. data = [ { 'guid' : '308da7a3-cac0-42c8-bb74-3b05ba9281a3' , 'username' : 'tsadmin' , ... }, { 'guid' : 'c0fcfcdd-e7a9-404b-9aab-f541a8d7fed3' , 'username' : 'cs_tools' , ... }, ... , { 'guid' : '1b3c6f8d-9dc5-4515-a4fc-c47bfbad4bce' , 'username' : 'namey.namerson' , ... } ] Tip It's highly recommended to use either the standard library's or pydantic's dataclass paradigm for your custom Syncer. This will easily allow you to set up your syncer without overriding the __init__ method. If you're using dataclasses , leverage the __post_init__ method. If you're using pydantic , leverage the __post_init_post_parse__ method. See below references for more information. dataclasses.dataclass pydantic.dataclasses.dataclass The other required file is a MANIFEST which tells CS Tools how to utilize your Syncer. This JSON file should live in same directory as your syncer.py . It should contain top-level keys in order to inform CS Tools how to set it up. name : the name of your custom syncer protocol syncer_class : the python class which contains your syncer's code requirements : an array of pip-friendly requirements to have installed prior to code execution MANIFEST.json \u00b6 { \"name\" : \"<custom-syncer>\" , \"syncer_class\" : \"CustomSyncer\" , \"requirements\" : [ \"package>=X.Y.Z\" ] } See it in action Want to see example code of how to implement your own syncer? Check out the built-in ones! CSV SQLite Snowflake","title":"The Protocol"},{"location":"syncer/protocol/#syncerpy","text":"from dataclasses import dataclass from typing import Any , Dict , List # also available from pydantic.dataclasses import dataclass RECORDS_FORMAT = List [ Dict [ str , Any ]] @dataclass class SyncerProtocol : \"\"\" Implements a way to load and dump data to a data source. \"\"\" name : str def load ( self , identifier : str ) -> RECORDS_FORMAT : \"\"\" Extract data from the data storage layer. Parameters ---------- identifier: str resource name within the storage layer to extract data from \"\"\" def dump ( self , identifier : str , * , data : RECORDS_FORMAT ) -> None : \"\"\" Persist data to the data storage layer. Parameters ---------- identifier: str resource name within the storage layer to extract data from data: list-like of dictionaries data to persist \"\"\" Implementing a Database Syncer? Database Syncers have special meaning in CS Tools. They interact with complex data stores, typically at a remote location. Set an attribute on your syncer class named __is_database__ to any truthy value. This will tell CS Tools to run metadata.create_all(syncer.cnxn) prior to any calls to your syncer. Additonally, your syncer should expose an cnxn attribute, with a fully instantiated sqlalchemy.engine.Engine to interact with the database backend. \ud83d\udd25 Pro tip : during initialization, register a sqlalchemy event listener to capture the metadata during table creation. from dataclasses import dataclass import sqlalchemy as sa @dataclass class FooSyncer : __is_database__ = True name = 'foo_syncer' def __post_init__ ( self ): self . engine = sa . create_engine ( ... ) self . cnxn = self . engine . connect () sa . event . listen ( sa . schema . MetaData , 'after_create' , self . capture_metadata ) def capture_metadata ( self , metadata , cnxn , ** kw ): self . metadata = metadata Data is expressed to and from the syncer in standardized JSON format. The data should behave like a list of flat dictionaries. This format is most similar to how you would receive data back from many REST and DB-APIs. data = [ { 'guid' : '308da7a3-cac0-42c8-bb74-3b05ba9281a3' , 'username' : 'tsadmin' , ... }, { 'guid' : 'c0fcfcdd-e7a9-404b-9aab-f541a8d7fed3' , 'username' : 'cs_tools' , ... }, ... , { 'guid' : '1b3c6f8d-9dc5-4515-a4fc-c47bfbad4bce' , 'username' : 'namey.namerson' , ... } ] Tip It's highly recommended to use either the standard library's or pydantic's dataclass paradigm for your custom Syncer. This will easily allow you to set up your syncer without overriding the __init__ method. If you're using dataclasses , leverage the __post_init__ method. If you're using pydantic , leverage the __post_init_post_parse__ method. See below references for more information. dataclasses.dataclass pydantic.dataclasses.dataclass The other required file is a MANIFEST which tells CS Tools how to utilize your Syncer. This JSON file should live in same directory as your syncer.py . It should contain top-level keys in order to inform CS Tools how to set it up. name : the name of your custom syncer protocol syncer_class : the python class which contains your syncer's code requirements : an array of pip-friendly requirements to have installed prior to code execution","title":"syncer.py"},{"location":"syncer/protocol/#manifestjson","text":"{ \"name\" : \"<custom-syncer>\" , \"syncer_class\" : \"CustomSyncer\" , \"requirements\" : [ \"package>=X.Y.Z\" ] } See it in action Want to see example code of how to implement your own syncer? Check out the built-in ones! CSV SQLite Snowflake","title":"MANIFEST.json"},{"location":"syncer/redshift/","text":"Lorem Ipsum..","title":"Redshift"},{"location":"syncer/snowflake/","text":"In Beta The Syncer protocol is in beta, it has been added to CS Tools in v1.3 on a provisional basis . It may change significantly in future releases and its interface will not be concrete until v2. Feedback from the community while it's still provisional would be extremely useful; either comment on #25 or create a new issue. Snowflake is a fully managed SaaS (software as a service) that provides a single platform for data warehousing, data lakes, data engineering, data science, data application development, and secure sharing and consumption of real-time / shared data. Snowflake features out-of-the-box features like separation of storage and compute, on-the-fly scalable compute, data sharing, data cloning, and third-party tools support in order to handle the demanding needs of growing enterprises. Want to see the source code? If you're writing a Custom Syncer, you can check our project code for an example. cs_tools/sync/ snowflake /syncer.py Snowflake DEFINITION.toml spec \u00b6 snowflake_account_identifier : your snowflake account name your account identifier can be seen in the web interface URL <account_identifier>.snowflakecomputing.com username : username to your Snowflake account password : password to your Snowflake account warehouse : warehouse name for the Snowflake session role : role name for the Snowflake session database : database name for the Snowflake session schema_ : optional , schema name for the Snowflake session default : PUBLIC auth_type : optional , either local or multi-factor default : local both local and multi-factor auth use your username and password, if using multi-factor access to a browser window is required 1 truncate_on_load : optional , either true or false , remove all data in the table prior to a new data load default : true How do I use the Snowflake syncer in commands? Mac, Linux Windows cs_tools tools searchable bi-server snowflake:///home/user/syncers/snowflake-definition.toml --compact cs_tools tools searchable bi-server snowflake://default --compact cs_tools tools searchable bi-server snowflake://C:\\Users\\%USERNAME%\\Downloads\\snowflake-definition.toml --compact cs_tools tools searchable bi-server snowflake://default --compact Learn how to register a default for syncers in How-to: Setup a Configuration File . Full Definition Example \u00b6 definition.toml [configuration] snowflake_account_identifier = 'thoughtspot' username = 'namey.namerson@thoughtspot.com' password = 'Really-Hard-Passphrase-to-Crack' warehouse = 'DATALOAD_WH_XS' role = 'SYSADMIN' database = 'CS_TOOLS' schema_ = 'PUBLIC' auth_type = 'multi-factor' truncate_on_load = true While Snowflake supports two methods of multi-factor authentication, CS Tools will utilize Browser-based SSO . With browser-based SSO, the Snowflake-provided client (for example, the Snowflake JDBC driver) needs to be able to open the user\u2019s web browser. Browser-based SSO does not work if the Snowflake-provided client is used by code that runs on a server. \u21a9","title":"Snowflake"},{"location":"syncer/snowflake/#snowflake-definitiontoml-spec","text":"snowflake_account_identifier : your snowflake account name your account identifier can be seen in the web interface URL <account_identifier>.snowflakecomputing.com username : username to your Snowflake account password : password to your Snowflake account warehouse : warehouse name for the Snowflake session role : role name for the Snowflake session database : database name for the Snowflake session schema_ : optional , schema name for the Snowflake session default : PUBLIC auth_type : optional , either local or multi-factor default : local both local and multi-factor auth use your username and password, if using multi-factor access to a browser window is required 1 truncate_on_load : optional , either true or false , remove all data in the table prior to a new data load default : true How do I use the Snowflake syncer in commands? Mac, Linux Windows cs_tools tools searchable bi-server snowflake:///home/user/syncers/snowflake-definition.toml --compact cs_tools tools searchable bi-server snowflake://default --compact cs_tools tools searchable bi-server snowflake://C:\\Users\\%USERNAME%\\Downloads\\snowflake-definition.toml --compact cs_tools tools searchable bi-server snowflake://default --compact Learn how to register a default for syncers in How-to: Setup a Configuration File .","title":"Snowflake DEFINITION.toml spec"},{"location":"syncer/snowflake/#full-definition-example","text":"definition.toml [configuration] snowflake_account_identifier = 'thoughtspot' username = 'namey.namerson@thoughtspot.com' password = 'Really-Hard-Passphrase-to-Crack' warehouse = 'DATALOAD_WH_XS' role = 'SYSADMIN' database = 'CS_TOOLS' schema_ = 'PUBLIC' auth_type = 'multi-factor' truncate_on_load = true While Snowflake supports two methods of multi-factor authentication, CS Tools will utilize Browser-based SSO . With browser-based SSO, the Snowflake-provided client (for example, the Snowflake JDBC driver) needs to be able to open the user\u2019s web browser. Browser-based SSO does not work if the Snowflake-provided client is used by code that runs on a server. \u21a9","title":"Full Definition Example"},{"location":"syncer/sqlite/","text":"In Beta The Syncer protocol is in beta, it has been added to CS Tools in v1.3 on a provisional basis . It may change significantly in future releases and its interface will not be concrete until v2. Feedback from the community while it's still provisional would be extremely useful; either comment on #25 or create a new issue. SQLite is a C-language library that implements a small, fast, self-contained, high-reliability, full-featured, SQL database engine. SQLite is the most used database engine in the world. The SQLite file format is stable, cross-platform, and backwards compatible and the developers pledge to keep it that way through the year 2050. Want to see the source code? If you're writing a Custom Syncer, you can check our project code for an example. cs_tools/sync/ SQLite /syncer.py SQLite DEFINITION.toml spec \u00b6 database_path : name of the database to store data within database will be created if it does not exist truncate_on_load : optional , either true or false default : true a TRUNCATE statement will be issued prior to loading any data loads if true is used How do I use the SQLite syncer in commands? Mac, Linux Windows cs_tools tools searchable bi-server sqlite:///home/user/syncers/sqlite-definition.toml --compact cs_tools tools searchable bi-server sqlite://default --compact cs_tools tools searchable bi-server sqlite://C:\\Users\\%USERNAME%\\Downloads\\sqlite-definition.toml --compact cs_tools tools searchable bi-server sqlite://default --compact Learn how to register a default for syncers in How-to: Setup a Configuration File . Full Definition Example \u00b6 definition.toml [configuration] database_path = '/home/user/ts-data/production.db'","title":"SQLite"},{"location":"syncer/sqlite/#sqlite-definitiontoml-spec","text":"database_path : name of the database to store data within database will be created if it does not exist truncate_on_load : optional , either true or false default : true a TRUNCATE statement will be issued prior to loading any data loads if true is used How do I use the SQLite syncer in commands? Mac, Linux Windows cs_tools tools searchable bi-server sqlite:///home/user/syncers/sqlite-definition.toml --compact cs_tools tools searchable bi-server sqlite://default --compact cs_tools tools searchable bi-server sqlite://C:\\Users\\%USERNAME%\\Downloads\\sqlite-definition.toml --compact cs_tools tools searchable bi-server sqlite://default --compact Learn how to register a default for syncers in How-to: Setup a Configuration File .","title":"SQLite DEFINITION.toml spec"},{"location":"syncer/sqlite/#full-definition-example","text":"definition.toml [configuration] database_path = '/home/user/ts-data/production.db'","title":"Full Definition Example"},{"location":"syncer/what-is/","text":"Syncers allow CS Tools to interact with a data storage layer without having to know the explicit details of how to do so. We've implemented syncers to many popular data storage formats. In Beta The Syncer protocol is in beta, it has been added to CS Tools in v1.3 on a provisional basis . It may change significantly in future releases and its interface will not be concrete until v2. Feedback from the community while it's still provisional would be extremely useful; either comment on #25 or create a new issue. %%{init: { \"securityLevel\": \"loose\" }}%% graph LR %% nodes A[ThoughtSpot] %% A[\"<img src='https://imageio.forbes.com/specials-images/imageserve/5d7912fb0762110008c1ec70/0x0.jpg'; width='30' />\"] B{{searchable gather}} C{Syncer} D[Snowflake] %% links A --> | APIs | B subgraph cs_tools B -.- | has a | C; end C ---> | dump | D; D ---> | load | C; data flow diagram between ThoughtSpot and an external data source How do I use Syncers? \u00b6 In order to interact with your external data source, users are required to supply a definition.toml file. This is a file which tells your Syncer how to behave. Think of the DEFINITION.toml as a mini configuration file. For example if you are to use the Excel syncer, you might specify a filepath to the target workbook. On the other hand if you use the Database syncer, you could be asked to provide database connection or authentication details. Each Syncer has different requirements and should document them clearly. some examples of DEFINITION.toml CSV SQLite Google Sheets Snowflake Custom Syncer [configuration] directory = 'C:\\Users\\NameyNamerson\\Downloads\\thoughtspot' delimiter = '|' escape_character = '\\' zipped = true [configuration] database_path = '/home/user/ts-data/production.db' truncate_on_load = true [configuration] spreadsheet = 'ThoughtSpot Data Sink' mode = 'overwrite' credentials_file = '/home/.config/cs_tools/gsheets/credentials.json' [configuration] snowflake_account_identifier = 'thoughtspot' username = 'namey.namerson@thoughtspot.com' password = 'Really-Hard-Passphrase-to-Crack' warehouse = 'DATALOAD_WH_XS' role = 'SYSADMIN' database = 'CS_TOOLS' manifest = '/home/user/syncers/foo-syncer/MANIFEST.json' [configuration] ... custom syncers are an advanced feature! users must supply both the path to the MANIFEST.json and the configuration all at once* Once you have have a definition file, you can supply it to any cs_tools command which documents that it interfaces with Syncers. The syntax for this looks like.. cs_tools tools searchable bi-server gsheets:///home/user/syncers/data-sink.toml --compact Where the gsheets:// portion tells CS Tools which Syncer to use, and the /home/user/syncers/data-sink.toml is the full path to your definition.toml file. If your data format is not yet implemented, read on to the next page to learn about the syncer protocol and be able to write your own custom syncer.","title":"What's a Syncer?"},{"location":"syncer/what-is/#how-do-i-use-syncers","text":"In order to interact with your external data source, users are required to supply a definition.toml file. This is a file which tells your Syncer how to behave. Think of the DEFINITION.toml as a mini configuration file. For example if you are to use the Excel syncer, you might specify a filepath to the target workbook. On the other hand if you use the Database syncer, you could be asked to provide database connection or authentication details. Each Syncer has different requirements and should document them clearly. some examples of DEFINITION.toml CSV SQLite Google Sheets Snowflake Custom Syncer [configuration] directory = 'C:\\Users\\NameyNamerson\\Downloads\\thoughtspot' delimiter = '|' escape_character = '\\' zipped = true [configuration] database_path = '/home/user/ts-data/production.db' truncate_on_load = true [configuration] spreadsheet = 'ThoughtSpot Data Sink' mode = 'overwrite' credentials_file = '/home/.config/cs_tools/gsheets/credentials.json' [configuration] snowflake_account_identifier = 'thoughtspot' username = 'namey.namerson@thoughtspot.com' password = 'Really-Hard-Passphrase-to-Crack' warehouse = 'DATALOAD_WH_XS' role = 'SYSADMIN' database = 'CS_TOOLS' manifest = '/home/user/syncers/foo-syncer/MANIFEST.json' [configuration] ... custom syncers are an advanced feature! users must supply both the path to the MANIFEST.json and the configuration all at once* Once you have have a definition file, you can supply it to any cs_tools command which documents that it interfaces with Syncers. The syntax for this looks like.. cs_tools tools searchable bi-server gsheets:///home/user/syncers/data-sink.toml --compact Where the gsheets:// portion tells CS Tools which Syncer to use, and the /home/user/syncers/data-sink.toml is the full path to your definition.toml file. If your data format is not yet implemented, read on to the next page to learn about the syncer protocol and be able to write your own custom syncer.","title":"How do I use Syncers?"},{"location":"tutorial/archiver/","text":"/* Hide the \"Edit on Github\" button */ .md-content__button { display: none; } Running the Tools \u00b6 Now that we've configured our environment, let's explore the tools! You can find all of the tools by either visiting the documentation or typing... cs_tools tools --help Archiver: Maintaining metadata \u00b6 Archiver is a tool that helps you find and clean up stale answers and liveboards in your ThoughtSpot platform. As the number of users grow, so does the content that they create. Even though no data from your data sources are stored within ThoughtSpot , maintaining unused references to this content still requires resources. Additionally, excess metadata can slow down the backup, restore, and cluster upgrades processes. Let's look at the commands you get with the Archiver tool. identify revert remove Compare recently active content (Answers and Liveboards) against all of the created content in your platform. --tag The name of the ThoughtSpot sticker to attach to inactive content. If this tag doesn't exist, we'll create it. --recent-activity, --recent-modified The number of days to consider for content recently viewed, created, or saved -- don't mark it for archival. --ignore-tag Filter out content which has been tagged with this name. Remove a specific --tag from all content. Remove all content with a specific tag. --tag The name of the ThoughtSpot sticker which identifies inactive content. --export-tml The full path to export content which has been marked for deletion. --export-only If specified, do not delete the content , only exports as a zip file. cs_tools tools archiver --help From the available commands, we can come up with an administrative process to help maintain a clean environment. You can use the below framework with Archiver . 1. Identify stale content 2. Inform your ThoughtSpot User community 3. Maintain a deprecration cycle 4. Purge your cluster of stale content Run Archiver identify to isolate inactive content. Label the tag name as clean-up . Communicate to your ThoughtSpot User community that the admin team will be performing a cleanup activity. In an effort to keep the ThoughtSpot cluster running smoothly, Answers and Liveboard which have not been viewed in over --recent-activity days will be marked for deletion. If Users wish to keep their content, they may go and remove the clean-up tag. Wait a minimum of one week before performing any cleanup actions. Maintain an active dialogue with your User community during this time, in case they have questions or concerns. Run Archiver remove , targeting the tag name clean-up . Strongly consider using the --export-tml so you can restore any content that users wish they had saved during the deprecation cycle. Try it out \u00b6 Let's run the command to identify all content which hasn't been viewed within the past 3 months or created in the last 4 months. We'll use the tag clean-up to communicate to our Users that this content is targeted for removal. We'll also ignore all of our Training content, since we haven't run a new user onboarding this quarter, and our Certified datasets, even though it's unlikely that this content hasn't been viewed in the past 90 days.. but it's better to be safe than sorry! Windows Mac, Linux, ThoughtSpot cluster cs_tools tools archiver identify ` - -config non-prod ` - -tag clean-up ` - -recent-activity 90 ` - -recent-modified 120 ` - -ignore-tag certified ` - -ignore-tag training cs_tools tools archiver identify \\ --config non-prod \\ --tag clean-up \\ --recent-activity 90 \\ --recent-modified 120 \\ --ignore-tag certified \\ --ignore-tag training Using --config Since we set our non-prod configuration as the default, usage of --config non-prod is optional here. CS Tools will attempt to use the default configuration first, but if we wanted to run Archiver against another cluster (eg. Production), we can override it with the --config option. cs_tools tools archiver identify ... Administrative Responsibility The maintainers of CS Tools recognize when we give you lots of power. For this reason, with tools that perform bulk management, it's important to have fail-safes before executing the commands. With Archiver , you'll be prompted to continue with your operation before affecting potentially hundreds of Users. Report on Archiver operations \u00b6 In highly active ThoughtSpot deployments, the identification process can find more content than the admin team is comfortable interacting with directly in the web user-interace. On all three Archiver commands, you'll find a --report option which labels information about the type of content that we'll tag or remove, as well as who owns it. This information can be incredibly helpful to inspect and even help you communicate with those Users directly. In the next section , we'll learn about Syncers and how you can leverage them to manage all the information that Archiver produces.","title":"Run the Archiver tool"},{"location":"tutorial/archiver/#running-the-tools","text":"Now that we've configured our environment, let's explore the tools! You can find all of the tools by either visiting the documentation or typing... cs_tools tools --help","title":"Running the Tools"},{"location":"tutorial/archiver/#archiver-maintaining-metadata","text":"Archiver is a tool that helps you find and clean up stale answers and liveboards in your ThoughtSpot platform. As the number of users grow, so does the content that they create. Even though no data from your data sources are stored within ThoughtSpot , maintaining unused references to this content still requires resources. Additionally, excess metadata can slow down the backup, restore, and cluster upgrades processes. Let's look at the commands you get with the Archiver tool. identify revert remove Compare recently active content (Answers and Liveboards) against all of the created content in your platform. --tag The name of the ThoughtSpot sticker to attach to inactive content. If this tag doesn't exist, we'll create it. --recent-activity, --recent-modified The number of days to consider for content recently viewed, created, or saved -- don't mark it for archival. --ignore-tag Filter out content which has been tagged with this name. Remove a specific --tag from all content. Remove all content with a specific tag. --tag The name of the ThoughtSpot sticker which identifies inactive content. --export-tml The full path to export content which has been marked for deletion. --export-only If specified, do not delete the content , only exports as a zip file. cs_tools tools archiver --help From the available commands, we can come up with an administrative process to help maintain a clean environment. You can use the below framework with Archiver . 1. Identify stale content 2. Inform your ThoughtSpot User community 3. Maintain a deprecration cycle 4. Purge your cluster of stale content Run Archiver identify to isolate inactive content. Label the tag name as clean-up . Communicate to your ThoughtSpot User community that the admin team will be performing a cleanup activity. In an effort to keep the ThoughtSpot cluster running smoothly, Answers and Liveboard which have not been viewed in over --recent-activity days will be marked for deletion. If Users wish to keep their content, they may go and remove the clean-up tag. Wait a minimum of one week before performing any cleanup actions. Maintain an active dialogue with your User community during this time, in case they have questions or concerns. Run Archiver remove , targeting the tag name clean-up . Strongly consider using the --export-tml so you can restore any content that users wish they had saved during the deprecation cycle.","title":"Archiver: Maintaining metadata"},{"location":"tutorial/archiver/#try-it-out","text":"Let's run the command to identify all content which hasn't been viewed within the past 3 months or created in the last 4 months. We'll use the tag clean-up to communicate to our Users that this content is targeted for removal. We'll also ignore all of our Training content, since we haven't run a new user onboarding this quarter, and our Certified datasets, even though it's unlikely that this content hasn't been viewed in the past 90 days.. but it's better to be safe than sorry! Windows Mac, Linux, ThoughtSpot cluster cs_tools tools archiver identify ` - -config non-prod ` - -tag clean-up ` - -recent-activity 90 ` - -recent-modified 120 ` - -ignore-tag certified ` - -ignore-tag training cs_tools tools archiver identify \\ --config non-prod \\ --tag clean-up \\ --recent-activity 90 \\ --recent-modified 120 \\ --ignore-tag certified \\ --ignore-tag training Using --config Since we set our non-prod configuration as the default, usage of --config non-prod is optional here. CS Tools will attempt to use the default configuration first, but if we wanted to run Archiver against another cluster (eg. Production), we can override it with the --config option. cs_tools tools archiver identify ... Administrative Responsibility The maintainers of CS Tools recognize when we give you lots of power. For this reason, with tools that perform bulk management, it's important to have fail-safes before executing the commands. With Archiver , you'll be prompted to continue with your operation before affecting potentially hundreds of Users.","title":"Try it out"},{"location":"tutorial/archiver/#report-on-archiver-operations","text":"In highly active ThoughtSpot deployments, the identification process can find more content than the admin team is comfortable interacting with directly in the web user-interace. On all three Archiver commands, you'll find a --report option which labels information about the type of content that we'll tag or remove, as well as who owns it. This information can be incredibly helpful to inspect and even help you communicate with those Users directly. In the next section , we'll learn about Syncers and how you can leverage them to manage all the information that Archiver produces.","title":"Report on Archiver operations"},{"location":"tutorial/config/","text":"/* Hide the \"Edit on Github\" button */ .md-content__button { display: none; } Configuration Files \u00b6 CS Tools is built on top of the ThoughtSpot REST APIs . In order to interact with the APIs, ThoughtSpot enforces that you must log in as an authorized user. If you do not have a local account in ThoughtSpot already, you can create one to use with CS Tools as a service account 1 . Whatever permissions this User has, will be the same security context that CS Tools utilizes. Set up a config file \u00b6 The command we'll use to set up a new config is cs_tools config create . This comes with many options, explore them below. config host, port username, password default syncer disable_sso disable_ssl verbose temp_dir [required] --config non-prod The name of your configuration file. This can be whatever you want it to be. It's recommended to use dashes instead of spaces. This name will be referenced in each of the tools' commands. [required] --host https://my-company.thoughtspot.cloud/ The URL of your ThoughtSpot cluster. This is the same way that your users access ThoughtSpot . Make sure to include the http:// scheme part of the url. --port can be specified if your instance lives on an alternate resource. [required] --username cs_tools Username and password of the local account to access ThoughtSpot with. If the password is not supplied , you'll be securely prompted to enter it before the config is finalized. [optional] --default If supplied, designate this configuration as the one to use for tools' commands. [optional] --syncer /Users/$USER/work/cfgs Set default syncers within your configuration file. This can be supplied multiple times, once for each type of syncer. You'll learn more about syncers later in this tutorial. [optional] --disable_sso If your ThoughtSpot cluster has automatic redirect enabled for your SAML or OIDC provider, supply this flag to disable it for the CS Tools login experience. [optional] --disable_ssl Python performs a local verification check of SSL certificates. This can sometimes produces errors if the SSL cert is self-signed or if it is improperly applied to the domain your ThoughtSpot cluster lives at. You can supply this flag to disable the verification check. [optional] --verbose CS Tools will log information to a file whenever you run commands. By default, low-level information is not stored in this file. Use the --verbose flag to capture more information when debugging issues. This flag may be supplied to any tool command to override the behavior in your config file. [optional] --temp_dir //172.16.0.10/cs_tools/tmp CS Tools sometimes uses the local filesystem as a temporary storage mechanism for large files. If you are running the tools on a resource-constrained platform, you can choose to write those files off-disk instead. Connect a network attached storage, and reference it with this option. This flag may be supplied to any tool command to override the behavior in your config file. Putting it all together.. Windows Mac, Linux, ThoughtSpot cluster cs_tools config create ` - -config non-prod ` - -host https :// my-company . thoughtspot . cloud / ` - -username cs_tools ` - -disable_sso ` - -default cs_tools config create \\ --config non-prod \\ --host https://my-company.thoughtspot.cloud/ \\ --username cs_tools \\ --disable_sso \\ --default Check your config \u00b6 cs_tools config check --config non-prod Example Configuration File \u00b6 You can view all the currently configured environments by using the cs_tools config show command. If a particular configuration is specified, you can view the contents of that file. What happens with my password? For security reasons, your password lives obfuscated both in memory and the configuration file upon being captured by cs_tools . It is only decrypted once per run, when authorizing with your ThoughtSpot platform. cs_tools config show --config production Cluster configs located at : ~/ . config / cs_tools [default] ~/ . config / cs_tools / cluster-cfg_non-prod . toml name = \"non-prod\" verbose = false temp_dir = \"//172.16.0.10/cs_tools/tmp\" [thoughtspot] host = \"https://my-company.thoughtspot.cloud/\" disable_ssl = false disable_sso = true [auth.frontend] username = \"cs_tools\" password = \"aBcDEf1GhIJkLMnOPQRStuVx\" Exploring the Tools \u00b6 With a configuration file set up, we're ready to explore all the utilities that come with CS Tools . In the next section , we'll learn about the Archiver tool and see how we can leverage it to keep our ThoughtSpot cluster clean while it grows. The CS Tools project supports many versions of ThoughtSpot , but usage of the REST APIs is restricted in certain scenarios . Local Users, or Basic Auth, is unrestricted across all ThoughtSpot license types. \u21a9","title":"Setup a Config File"},{"location":"tutorial/config/#configuration-files","text":"CS Tools is built on top of the ThoughtSpot REST APIs . In order to interact with the APIs, ThoughtSpot enforces that you must log in as an authorized user. If you do not have a local account in ThoughtSpot already, you can create one to use with CS Tools as a service account 1 . Whatever permissions this User has, will be the same security context that CS Tools utilizes.","title":"Configuration Files"},{"location":"tutorial/config/#set-up-a-config-file","text":"The command we'll use to set up a new config is cs_tools config create . This comes with many options, explore them below. config host, port username, password default syncer disable_sso disable_ssl verbose temp_dir [required] --config non-prod The name of your configuration file. This can be whatever you want it to be. It's recommended to use dashes instead of spaces. This name will be referenced in each of the tools' commands. [required] --host https://my-company.thoughtspot.cloud/ The URL of your ThoughtSpot cluster. This is the same way that your users access ThoughtSpot . Make sure to include the http:// scheme part of the url. --port can be specified if your instance lives on an alternate resource. [required] --username cs_tools Username and password of the local account to access ThoughtSpot with. If the password is not supplied , you'll be securely prompted to enter it before the config is finalized. [optional] --default If supplied, designate this configuration as the one to use for tools' commands. [optional] --syncer /Users/$USER/work/cfgs Set default syncers within your configuration file. This can be supplied multiple times, once for each type of syncer. You'll learn more about syncers later in this tutorial. [optional] --disable_sso If your ThoughtSpot cluster has automatic redirect enabled for your SAML or OIDC provider, supply this flag to disable it for the CS Tools login experience. [optional] --disable_ssl Python performs a local verification check of SSL certificates. This can sometimes produces errors if the SSL cert is self-signed or if it is improperly applied to the domain your ThoughtSpot cluster lives at. You can supply this flag to disable the verification check. [optional] --verbose CS Tools will log information to a file whenever you run commands. By default, low-level information is not stored in this file. Use the --verbose flag to capture more information when debugging issues. This flag may be supplied to any tool command to override the behavior in your config file. [optional] --temp_dir //172.16.0.10/cs_tools/tmp CS Tools sometimes uses the local filesystem as a temporary storage mechanism for large files. If you are running the tools on a resource-constrained platform, you can choose to write those files off-disk instead. Connect a network attached storage, and reference it with this option. This flag may be supplied to any tool command to override the behavior in your config file. Putting it all together.. Windows Mac, Linux, ThoughtSpot cluster cs_tools config create ` - -config non-prod ` - -host https :// my-company . thoughtspot . cloud / ` - -username cs_tools ` - -disable_sso ` - -default cs_tools config create \\ --config non-prod \\ --host https://my-company.thoughtspot.cloud/ \\ --username cs_tools \\ --disable_sso \\ --default","title":"Set up a config file"},{"location":"tutorial/config/#check-your-config","text":"cs_tools config check --config non-prod","title":"Check your config"},{"location":"tutorial/config/#example-configuration-file","text":"You can view all the currently configured environments by using the cs_tools config show command. If a particular configuration is specified, you can view the contents of that file. What happens with my password? For security reasons, your password lives obfuscated both in memory and the configuration file upon being captured by cs_tools . It is only decrypted once per run, when authorizing with your ThoughtSpot platform. cs_tools config show --config production Cluster configs located at : ~/ . config / cs_tools [default] ~/ . config / cs_tools / cluster-cfg_non-prod . toml name = \"non-prod\" verbose = false temp_dir = \"//172.16.0.10/cs_tools/tmp\" [thoughtspot] host = \"https://my-company.thoughtspot.cloud/\" disable_ssl = false disable_sso = true [auth.frontend] username = \"cs_tools\" password = \"aBcDEf1GhIJkLMnOPQRStuVx\"","title":"Example Configuration File"},{"location":"tutorial/config/#exploring-the-tools","text":"With a configuration file set up, we're ready to explore all the utilities that come with CS Tools . In the next section , we'll learn about the Archiver tool and see how we can leverage it to keep our ThoughtSpot cluster clean while it grows. The CS Tools project supports many versions of ThoughtSpot , but usage of the REST APIs is restricted in certain scenarios . Local Users, or Basic Auth, is unrestricted across all ThoughtSpot license types. \u21a9","title":"Exploring the Tools"},{"location":"tutorial/install/","text":"/* Hide the \"Edit on Github\" button and paragraph header link */ .md-content__button { display: none; } .md-typeset .headerlink { display: none; } Installation & Upgrading the Tools \u00b6 CS Tools is a command line application written in Python . The minimum supported version of Python is 3.6.8 any newer version of Python is fine too Click the blue button below to fill out the Google Form 1 and get access to the CS Tools installer. What's this? Whenever you see one of these colorful blocks, click on it for more information! Don't have Python installed yet? Python 3.6.8 or greater is required to install and operate CS Tools ! Windows Mac Linux ThoughtSpot cluster If you've never worked directly with Python before, chances are it is not installed on your computer. In Powershell, try typing python --version . In order for CS Tools to run appropriately, this version must be greater than the requirement above. If you do not have python installed, or your version of python is not greater than the above version, you can install it by going to Python's downloads website . Make sure you check Customize Installation and add Python to your PATH . More than likely, you have multiple versions of Python bundled with your distribution. In Terminal, try typing python --version . If it comes back with something like Python 2.7.18 then try again with python3 --version . In order for CS Tools to run appropriately, this version must be greater than the requirement above. If your version of python is not greater than the above version, you can install it by going to Python's downloads website . More than likely, you have multiple versions of Python bundled with your distribution. Try typing python --version . If it comes back with something like Python 2.7.18 then try again with python3 --version . In order for CS Tools to run appropriately, this version must be greater than the requirement above. If your version of python is not greater than the above version, you should consult with your system administration team to understand if it's acceptable to install multiple versions of python on this hardware. An alternative for installing multiple system-level python distributions could be pyenv . Python is already installed here! You should be good to go. get the tools After Downloading \u00b6 The CS Tools bootstrapper will install or upgrade your isolated environment. If your target machine doesn't have internet, the bootstrapper also contains all the dependencies necessary to build the environment. Follow the steps below to get CS Tools installed on your platform. Windows Mac, Linux ThoughtSpot cluster Open up Windows Terminal or Powershell . # Navigate to the Downloads directory cd $env:USERPROFILE / Downloads # Unzip the CS Tools bootstrapper Remove-Item -Recurse -Force cs_tools-boot * -ErrorAction Ignore Expand-Archive windows-cs_tools -* -DestinationPath cs_tools-bootstrapper # Navigate into the unzipped directory cd cs_tools-bootstrapper # Run the help command to see the CLI python bootstrap -h # Run the installer python bootstrap - -reinstall Open up a new Terminal window. # Navigate to the Downloads directory cd $HOME /Downloads # Unzip the CS Tools bootstrapper rm -r cs_tools-boot* unzip *-cs_tools-* -d cs_tools-bootstrapper # Navigate into the unzipped directory cd cs_tools-bootstrapper # Run the help command to see the CLI python bootstrap -h # Run the installer python bootstrap --reinstall command not found: python If you see this error in your terminal, try using python3 instead of python above. We strongly recommend against this option. CS Tools should ideally run from another machine. # Navigate to the Downloads directory cd $HOME /Downloads # Unzip the CS Tools bootstrapper unzip *-cs_tools-* -d cs_tools-bootstrapper # Navigate into the unzipped directory cd cs_tools-bootstrapper # Run the help command to see the CLI python bootstrap -h # Run the installer python bootstrap --reinstall I get a REALLY noisy error about locales! By default, some ThoughtSpot Software builds limit the Python environment to where it thinks you are restricted to ASCII data. The solution to this problem is to export your locale prior to executing CS Tools . export LC_ALL=C.UTF-8 export LANG=C.UTF-8 The bootstrapper adds locale data to your shell profiles. Run exec $SHELL to reload the profile and capture this information. Try running CS Tools by typing.. cs_tools \u200b \u200b Enter If it doesn't look like the image below, try restarting your terminal first. A note on Getting Help \u00b6 CS Tools exists totally separate from your ThoughtSpot cluster. The project is maintained by our Professional Services and Customer Success teams as well as by contributions from you, our customers! You cannot raise a support ticket in order to get the proper help. If you run into issues at any time, either reach out to your assigned Customer Success Manager, or submit feedback to the CS Tools team directly in this Google Form , or open an issue on GitHub . Configure CS Tools \u00b6 CS Tools supports being run against many different platforms. Configuration files represent a way to define a specific user interacting with ThoughtSpot programmatically. This can be helpful if you maintain both a Production and Non-Production environment, or if you operate as a center of excellence and want to provide your domain managers with programmatic access to the portion of ThoughtSpot . Read on to the next section to learn about how to set up a configuration file. We use the survey responses as a feedback loop into the ThoughtSpot Product team. To add extra emphasis to that feedback loop, you can find or submit your idea to the Product Ideas section in ThoughtSpot Community. \u21a9","title":"Install & Upgrade"},{"location":"tutorial/install/#installation-upgrading-the-tools","text":"CS Tools is a command line application written in Python . The minimum supported version of Python is 3.6.8 any newer version of Python is fine too Click the blue button below to fill out the Google Form 1 and get access to the CS Tools installer. What's this? Whenever you see one of these colorful blocks, click on it for more information! Don't have Python installed yet? Python 3.6.8 or greater is required to install and operate CS Tools ! Windows Mac Linux ThoughtSpot cluster If you've never worked directly with Python before, chances are it is not installed on your computer. In Powershell, try typing python --version . In order for CS Tools to run appropriately, this version must be greater than the requirement above. If you do not have python installed, or your version of python is not greater than the above version, you can install it by going to Python's downloads website . Make sure you check Customize Installation and add Python to your PATH . More than likely, you have multiple versions of Python bundled with your distribution. In Terminal, try typing python --version . If it comes back with something like Python 2.7.18 then try again with python3 --version . In order for CS Tools to run appropriately, this version must be greater than the requirement above. If your version of python is not greater than the above version, you can install it by going to Python's downloads website . More than likely, you have multiple versions of Python bundled with your distribution. Try typing python --version . If it comes back with something like Python 2.7.18 then try again with python3 --version . In order for CS Tools to run appropriately, this version must be greater than the requirement above. If your version of python is not greater than the above version, you should consult with your system administration team to understand if it's acceptable to install multiple versions of python on this hardware. An alternative for installing multiple system-level python distributions could be pyenv . Python is already installed here! You should be good to go. get the tools","title":"Installation &amp; Upgrading the Tools"},{"location":"tutorial/install/#after-downloading","text":"The CS Tools bootstrapper will install or upgrade your isolated environment. If your target machine doesn't have internet, the bootstrapper also contains all the dependencies necessary to build the environment. Follow the steps below to get CS Tools installed on your platform. Windows Mac, Linux ThoughtSpot cluster Open up Windows Terminal or Powershell . # Navigate to the Downloads directory cd $env:USERPROFILE / Downloads # Unzip the CS Tools bootstrapper Remove-Item -Recurse -Force cs_tools-boot * -ErrorAction Ignore Expand-Archive windows-cs_tools -* -DestinationPath cs_tools-bootstrapper # Navigate into the unzipped directory cd cs_tools-bootstrapper # Run the help command to see the CLI python bootstrap -h # Run the installer python bootstrap - -reinstall Open up a new Terminal window. # Navigate to the Downloads directory cd $HOME /Downloads # Unzip the CS Tools bootstrapper rm -r cs_tools-boot* unzip *-cs_tools-* -d cs_tools-bootstrapper # Navigate into the unzipped directory cd cs_tools-bootstrapper # Run the help command to see the CLI python bootstrap -h # Run the installer python bootstrap --reinstall command not found: python If you see this error in your terminal, try using python3 instead of python above. We strongly recommend against this option. CS Tools should ideally run from another machine. # Navigate to the Downloads directory cd $HOME /Downloads # Unzip the CS Tools bootstrapper unzip *-cs_tools-* -d cs_tools-bootstrapper # Navigate into the unzipped directory cd cs_tools-bootstrapper # Run the help command to see the CLI python bootstrap -h # Run the installer python bootstrap --reinstall I get a REALLY noisy error about locales! By default, some ThoughtSpot Software builds limit the Python environment to where it thinks you are restricted to ASCII data. The solution to this problem is to export your locale prior to executing CS Tools . export LC_ALL=C.UTF-8 export LANG=C.UTF-8 The bootstrapper adds locale data to your shell profiles. Run exec $SHELL to reload the profile and capture this information. Try running CS Tools by typing.. cs_tools \u200b \u200b Enter If it doesn't look like the image below, try restarting your terminal first.","title":"After Downloading"},{"location":"tutorial/install/#a-note-on-getting-help","text":"CS Tools exists totally separate from your ThoughtSpot cluster. The project is maintained by our Professional Services and Customer Success teams as well as by contributions from you, our customers! You cannot raise a support ticket in order to get the proper help. If you run into issues at any time, either reach out to your assigned Customer Success Manager, or submit feedback to the CS Tools team directly in this Google Form , or open an issue on GitHub .","title":"A note on Getting Help"},{"location":"tutorial/install/#configure-cs-tools","text":"CS Tools supports being run against many different platforms. Configuration files represent a way to define a specific user interacting with ThoughtSpot programmatically. This can be helpful if you maintain both a Production and Non-Production environment, or if you operate as a center of excellence and want to provide your domain managers with programmatic access to the portion of ThoughtSpot . Read on to the next section to learn about how to set up a configuration file. We use the survey responses as a feedback loop into the ThoughtSpot Product team. To add extra emphasis to that feedback loop, you can find or submit your idea to the Product Ideas section in ThoughtSpot Community. \u21a9","title":"Configure CS Tools"},{"location":"tutorial/intro/","text":"/* Hide the \"Edit on Github\" button and paragraph header link */ .md-content__button { display: none; } .md-typeset .headerlink { display: none; } Getting Started with cs_tools \u00b6 This document should talk you through everything you need to get started with CS Tools . In this tutorial, we\u2019ll learn how to.. Install or Upgrade CS Tools Set up a configuration file to access ThoughtSpot Run one of the most popular tools: Archiver Create a Syncer definition to interact with an external data source Schedule Archiver to run regularly There are many utilities that come installed with CS Tools , make sure to read through the documentation carefully and check back often for new updates.","title":"Getting Started"},{"location":"tutorial/intro/#getting-started-with-cs_tools","text":"This document should talk you through everything you need to get started with CS Tools . In this tutorial, we\u2019ll learn how to.. Install or Upgrade CS Tools Set up a configuration file to access ThoughtSpot Run one of the most popular tools: Archiver Create a Syncer definition to interact with an external data source Schedule Archiver to run regularly There are many utilities that come installed with CS Tools , make sure to read through the documentation carefully and check back often for new updates.","title":"Getting Started with cs_tools"},{"location":"tutorial/schedule/","text":"/* Hide the \"Edit on Github\" button */ .md-content__button { display: none; } /* Hide the Next button in the footer (so the tutorial has a logical conclusion) */ .md-footer__link--next { display: none; } Scheduling with CS Tools \u00b6 Archiver is a powerful tool in your arsenal as a ThoughtSpot administrator. In order to take full advantage of it, you'll want to schedule it to run regularly. It can be helpful to keep close tabs on the amount of stale content that exists in your platform. Let's schedule our Archiver identification report to export from the platform once every week. Write a little program \u00b6 For the sake of example, we'll use this little program below to first run our command, and then count the number of lines in the file that start with \" answer \". This will act as an approximation for how much content is growing stale over time. Why so simple? Naturally your use case will be more complex, like writing this data to a database table and running alerting or exposing that data back into ThoughtSpot for example. While those use cases are important, they are outside the scope of this tutorial. Windows Mac, Linux, ThoughtSpot cluster For the sake of example, these are the contents of a Powershell script in your Downloads folder called counter.ps1 cs_tools tools archiver identify - -report csv :// default ` ; Select-String -Path $env:USERPROFILE / Downloads / archiver-report . csv -Pattern '^answer' ` | Measure-Object -Line For the sake of example, these are the contents of a bash script in your Downloads folder called counter.sh cs_tools tools archiver identify --report csv://default \\ | sed -e '1d' -e '/^answer/!d' $HOME /Downloads/archiver-report.csv \\ | wc -l Should I always write a file for my commands? You don't need to wrap your commands in a file and pass that to your scheduling utility. This is a just a common convention you will see when dealing with schedulers. If the CS Tools command doesn't need any follow-up, because it's inserting records into a database table or syncing Users, then you can schedule the naked command directly in the scheduling application. The choice is totally yours! Schedule it \u00b6 Now that we've decided how to track our content, we're ready to schedule our command to run weekly. Task Scheduler , , crontab Need help? Windows Documentation Reference document for the task scheduler command line utility. # Weekly, on Monday at 3 :05am schtasks /create ^ /tn cs_tools ^ /sc WEEKLY ^ /d MON ^ /st 03:05 ^ /tr $env:USERPROFILE/Downloads/counter.ps1 Need help? https://crontab.guru A helpful online utility for writing your cron schedule expressions. # Weekly, on Monday at 3:05am 5 3 * * 1 $HOME/Downloads/counter.sh Closing Thoughts \u00b6 And that's it! Now you have all the tools (pun fully intended ) you need to be able to get up and running with the CS Tools project. Be sure to check out the rest of the documentation, and also find us on ThoughtSpot Community . All the Tools Get Help GitHub Issues ThoughtSpot Community","title":"Schedule the Archiver"},{"location":"tutorial/schedule/#scheduling-with-cs-tools","text":"Archiver is a powerful tool in your arsenal as a ThoughtSpot administrator. In order to take full advantage of it, you'll want to schedule it to run regularly. It can be helpful to keep close tabs on the amount of stale content that exists in your platform. Let's schedule our Archiver identification report to export from the platform once every week.","title":"Scheduling with CS Tools"},{"location":"tutorial/schedule/#write-a-little-program","text":"For the sake of example, we'll use this little program below to first run our command, and then count the number of lines in the file that start with \" answer \". This will act as an approximation for how much content is growing stale over time. Why so simple? Naturally your use case will be more complex, like writing this data to a database table and running alerting or exposing that data back into ThoughtSpot for example. While those use cases are important, they are outside the scope of this tutorial. Windows Mac, Linux, ThoughtSpot cluster For the sake of example, these are the contents of a Powershell script in your Downloads folder called counter.ps1 cs_tools tools archiver identify - -report csv :// default ` ; Select-String -Path $env:USERPROFILE / Downloads / archiver-report . csv -Pattern '^answer' ` | Measure-Object -Line For the sake of example, these are the contents of a bash script in your Downloads folder called counter.sh cs_tools tools archiver identify --report csv://default \\ | sed -e '1d' -e '/^answer/!d' $HOME /Downloads/archiver-report.csv \\ | wc -l Should I always write a file for my commands? You don't need to wrap your commands in a file and pass that to your scheduling utility. This is a just a common convention you will see when dealing with schedulers. If the CS Tools command doesn't need any follow-up, because it's inserting records into a database table or syncing Users, then you can schedule the naked command directly in the scheduling application. The choice is totally yours!","title":"Write a little program"},{"location":"tutorial/schedule/#schedule-it","text":"Now that we've decided how to track our content, we're ready to schedule our command to run weekly. Task Scheduler , , crontab Need help? Windows Documentation Reference document for the task scheduler command line utility. # Weekly, on Monday at 3 :05am schtasks /create ^ /tn cs_tools ^ /sc WEEKLY ^ /d MON ^ /st 03:05 ^ /tr $env:USERPROFILE/Downloads/counter.ps1 Need help? https://crontab.guru A helpful online utility for writing your cron schedule expressions. # Weekly, on Monday at 3:05am 5 3 * * 1 $HOME/Downloads/counter.sh","title":"Schedule it"},{"location":"tutorial/schedule/#closing-thoughts","text":"And that's it! Now you have all the tools (pun fully intended ) you need to be able to get up and running with the CS Tools project. Be sure to check out the rest of the documentation, and also find us on ThoughtSpot Community . All the Tools Get Help GitHub Issues ThoughtSpot Community","title":"Closing Thoughts"},{"location":"tutorial/syncer/","text":"/* Hide the \"Edit on Github\" button */ .md-content__button { display: none; } /* Make better use of whitespace for supported syncers */ .admonition.tip > ul { columns: 3; } Learn about Syncers \u00b6 Syncers allow CS Tools to interact with popular data storage formats without having to know the details of how to do so. Think of it as a way to plug and play different places to store your data. We'll define for CS Tools which data storage we're using, and then pass that along with the rest of our command. Formats that CS Tools currently supports CSV SQLite ThoughtSpot Falcon Snowflake Google BigQuery Google Sheets Don't see your favorite data format above? This is for highly advanced users! Syncers follow a documented protocol, if you're savvy with coding in Python, visit the Syncer Protocol documentation page and learn about how you can write and supply your own custom syncer. With Archiver , we can supply a Syncer by passing the --report option. Along with the --dry-run option, this will allow to inspect the Answers and Liveboards that would be marked for deletion, all without ever affecting the platform we're targeting. %%{init: { \"securityLevel\": \"loose\" }}%% graph LR %% nodes A[ThoughtSpot &#8203 ] %% A[\"<img src='https://imageio.forbes.com/specials-images/imageserve/5d7912fb0762110008c1ec70/0x0.jpg'; width='30' />\"] B{{archiver identify<br/>--report csv://default<br/>--dry-run}} C{CSV<br/>Syncer} D[archiver-report.csv] %% links A --> | APIs | B subgraph cs_tools B -.- | using | C; end C ---> | dump | D; Set up the CSV Syncer \u00b6 To keep things simple, let's define a definition file for the CSV Syncer. This will allow us to export data that various tools produce directly to a file. You can find all the configuration settings for syncers in their section of the documentation . The CSV syncer is simple, all that's required is the directory location to export data to. Follow the instructions below to create a new CSV syncer. Execute the following command in your terminal. This will create a new report.toml file in your Downloads folder. Windows Mac, Linux, ThoughtSpot cluster ThoughtSpot cluster echo \"[configuration]\" > $env:USERPROFILE \\\\ Downloads \\\\ report . toml echo \"directory = `\" $env:USERPROFILE\\\\Downloads\\\\ `\" \" >> $env:USERPROFILE \\\\ Downloads \\\\ report . toml echo \"[configuration]\" >> $HOME /Downloads/report.toml echo \"directory = \\\" $HOME /Downloads\\\"\" >> $HOME /Downloads/report.toml mkdir $HOME /Downloads echo \"[configuration]\" >> $HOME /Downloads/report.toml echo \"directory = \\\" $HOME /Downloads\\\"\" >> $HOME /Downloads/report.toml Full CSV Syncer definition example # This is the top-level directive, it is required. [configuration] # The location to write CSVs to. directory = \"/path/to/my/folder/\" # Control what character is used to delimit values, CSV stands for # \"commas separated values\" but this parameter allows us to use # whatever character we want. delimiter = '|' # Control what character is used to escape reserved characters. escape_character = '\\' # Whether to turn the DIRECTORY above into a zip file, or leave # exported data as CSV. zipped = true Specifying the Syncer \u00b6 We've created a way for CS Tools to export data to CSV, but how do we use it? Remember, Archiver has an option called --report protocol://DEFINITION.toml . All Syncers in CS Tools follow a standard format, called a protocol. Additionally, each Syncer can be customized using their own set of parameters. For example, a CSV Syncer and a Snowflake Syncer require different setup information to be used. Whenever you need to specify a Syncer , you'll do so by providing the protocol name followed by the location of your syncer definition file , separated by the three characters :// . This is identical to the components that make up many common URI syntax like https:// , ftp:// , and mailto:// . Examples of the Syncer protocol URI syntax, all pointing to the same location. The contents of this file should be changed based on what Syncer you want to use. csv://$HOME/Downloads/report.toml snowflake://$HOME/Downloads/report.toml sqlite://$HOME/Downloads/report.toml gsheets://$HOME/Downloads/report.toml You can find the full details for each Syncer definition, as well as their protocol name in our documentation . Default Syncer \u00b6 Typing the full protocol out to the Syncer definition file can sometimes be difficult. For this reason, you can add a default for each type of protocol to your CS Tools config file. Let's set the CSV Syncer we created earlier to be the default for our current configuration. Windows Mac, Linux, ThoughtSpot cluster cs_tools config modify - -config non-prod - -syncer csv :// $env:USERPROFILE \\ Downloads \\ report . toml cs_tools config modify --config non-prod --syncer csv:// $HOME /Downloads/report.toml After we successfully modify our non-prod config, we can then specify the CSV syncer using the following syntax csv://default . Tip Since Syncer definitions are just files, they can be referenced across multiple configurations or even stored in a centrally located directory and be leveraged by multiple users interacting with CS Tools . Try it out \u00b6 Now that we've learned everything about how to use our CSV Syncer, let's try the command from the diagram above. Windows Mac, Linux, ThoughtSpot cluster cs_tools tools archiver identify ` - -report csv :// default ` - -dry-run cs_tools tools archiver identify \\ --report csv://default \\ --dry-run If we look at the contents of the file that was dumped to our Downloads directory, we'll find details about all the content that will be tagged and identified as inactive. content_type guid name created_at modified_at author operation answer 3d13b8e4-.. ThoughtSpo.. 3 months ago 3 months ago abc@thoughtspot.com identify answer dc659672-.. Accounts P.. 3 months ago 3 months ago def@thoughtspot.com identify answer 7c4916bc-.. Customers .. 3 months ago 3 months ago ghi@thoughtspot.com identify answer cc623165-.. Cohort Ans.. 3 months ago 3 months ago jkl@thoughtspot.com identify ... ... ... ... ... ... ... Define a governance process \u00b6 Now that we've got the tools to be able to maintain a clean ThoughtSpot platform as it grows, it's an excellent idea to regularly visit the state of metadata in our cluster. In the final section , we'll explore ways to schedule the tools on both Windows and Unix platforms.","title":"Using Syncers"},{"location":"tutorial/syncer/#learn-about-syncers","text":"Syncers allow CS Tools to interact with popular data storage formats without having to know the details of how to do so. Think of it as a way to plug and play different places to store your data. We'll define for CS Tools which data storage we're using, and then pass that along with the rest of our command. Formats that CS Tools currently supports CSV SQLite ThoughtSpot Falcon Snowflake Google BigQuery Google Sheets Don't see your favorite data format above? This is for highly advanced users! Syncers follow a documented protocol, if you're savvy with coding in Python, visit the Syncer Protocol documentation page and learn about how you can write and supply your own custom syncer. With Archiver , we can supply a Syncer by passing the --report option. Along with the --dry-run option, this will allow to inspect the Answers and Liveboards that would be marked for deletion, all without ever affecting the platform we're targeting. %%{init: { \"securityLevel\": \"loose\" }}%% graph LR %% nodes A[ThoughtSpot &#8203 ] %% A[\"<img src='https://imageio.forbes.com/specials-images/imageserve/5d7912fb0762110008c1ec70/0x0.jpg'; width='30' />\"] B{{archiver identify<br/>--report csv://default<br/>--dry-run}} C{CSV<br/>Syncer} D[archiver-report.csv] %% links A --> | APIs | B subgraph cs_tools B -.- | using | C; end C ---> | dump | D;","title":"Learn about Syncers"},{"location":"tutorial/syncer/#set-up-the-csv-syncer","text":"To keep things simple, let's define a definition file for the CSV Syncer. This will allow us to export data that various tools produce directly to a file. You can find all the configuration settings for syncers in their section of the documentation . The CSV syncer is simple, all that's required is the directory location to export data to. Follow the instructions below to create a new CSV syncer. Execute the following command in your terminal. This will create a new report.toml file in your Downloads folder. Windows Mac, Linux, ThoughtSpot cluster ThoughtSpot cluster echo \"[configuration]\" > $env:USERPROFILE \\\\ Downloads \\\\ report . toml echo \"directory = `\" $env:USERPROFILE\\\\Downloads\\\\ `\" \" >> $env:USERPROFILE \\\\ Downloads \\\\ report . toml echo \"[configuration]\" >> $HOME /Downloads/report.toml echo \"directory = \\\" $HOME /Downloads\\\"\" >> $HOME /Downloads/report.toml mkdir $HOME /Downloads echo \"[configuration]\" >> $HOME /Downloads/report.toml echo \"directory = \\\" $HOME /Downloads\\\"\" >> $HOME /Downloads/report.toml Full CSV Syncer definition example # This is the top-level directive, it is required. [configuration] # The location to write CSVs to. directory = \"/path/to/my/folder/\" # Control what character is used to delimit values, CSV stands for # \"commas separated values\" but this parameter allows us to use # whatever character we want. delimiter = '|' # Control what character is used to escape reserved characters. escape_character = '\\' # Whether to turn the DIRECTORY above into a zip file, or leave # exported data as CSV. zipped = true","title":"Set up the CSV Syncer"},{"location":"tutorial/syncer/#specifying-the-syncer","text":"We've created a way for CS Tools to export data to CSV, but how do we use it? Remember, Archiver has an option called --report protocol://DEFINITION.toml . All Syncers in CS Tools follow a standard format, called a protocol. Additionally, each Syncer can be customized using their own set of parameters. For example, a CSV Syncer and a Snowflake Syncer require different setup information to be used. Whenever you need to specify a Syncer , you'll do so by providing the protocol name followed by the location of your syncer definition file , separated by the three characters :// . This is identical to the components that make up many common URI syntax like https:// , ftp:// , and mailto:// . Examples of the Syncer protocol URI syntax, all pointing to the same location. The contents of this file should be changed based on what Syncer you want to use. csv://$HOME/Downloads/report.toml snowflake://$HOME/Downloads/report.toml sqlite://$HOME/Downloads/report.toml gsheets://$HOME/Downloads/report.toml You can find the full details for each Syncer definition, as well as their protocol name in our documentation .","title":"Specifying the Syncer"},{"location":"tutorial/syncer/#default-syncer","text":"Typing the full protocol out to the Syncer definition file can sometimes be difficult. For this reason, you can add a default for each type of protocol to your CS Tools config file. Let's set the CSV Syncer we created earlier to be the default for our current configuration. Windows Mac, Linux, ThoughtSpot cluster cs_tools config modify - -config non-prod - -syncer csv :// $env:USERPROFILE \\ Downloads \\ report . toml cs_tools config modify --config non-prod --syncer csv:// $HOME /Downloads/report.toml After we successfully modify our non-prod config, we can then specify the CSV syncer using the following syntax csv://default . Tip Since Syncer definitions are just files, they can be referenced across multiple configurations or even stored in a centrally located directory and be leveraged by multiple users interacting with CS Tools .","title":"Default Syncer"},{"location":"tutorial/syncer/#try-it-out","text":"Now that we've learned everything about how to use our CSV Syncer, let's try the command from the diagram above. Windows Mac, Linux, ThoughtSpot cluster cs_tools tools archiver identify ` - -report csv :// default ` - -dry-run cs_tools tools archiver identify \\ --report csv://default \\ --dry-run If we look at the contents of the file that was dumped to our Downloads directory, we'll find details about all the content that will be tagged and identified as inactive. content_type guid name created_at modified_at author operation answer 3d13b8e4-.. ThoughtSpo.. 3 months ago 3 months ago abc@thoughtspot.com identify answer dc659672-.. Accounts P.. 3 months ago 3 months ago def@thoughtspot.com identify answer 7c4916bc-.. Customers .. 3 months ago 3 months ago ghi@thoughtspot.com identify answer cc623165-.. Cohort Ans.. 3 months ago 3 months ago jkl@thoughtspot.com identify ... ... ... ... ... ... ...","title":"Try it out"},{"location":"tutorial/syncer/#define-a-governance-process","text":"Now that we've got the tools to be able to maintain a clean ThoughtSpot platform as it grows, it's an excellent idea to regularly visit the state of metadata in our cluster. In the final section , we'll explore ways to schedule the tools on both Windows and Unix platforms.","title":"Define a governance process"}]}